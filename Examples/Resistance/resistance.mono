JavaScript(// Detect browser quirks that we should be aware of.

function needsDynPrefix() {
    var span = document.createElement("span");
    span.innerHTML = "<script>alert('test');</script>";
    var scripts = span.getElementsByTagName("script");
    return scripts.length == 0;
}

var dynPrefix = needsDynPrefix() ? "<span style=\"display:none\">A</span>" : "";

// Function versions of operators

function not(x) { return !x; }
function neg(x) { return -x; }

function eq(x, y) { return x == y; }
function plus(x, y) { return x + y; }
function minus(x, y) { return x - y; }
function times(x, y) { return x * y; }
function div(x, y) { return x / y; }
function divInt(x, y) { if (y == 0) er("Division by zero"); var n = x / y; return n < 0 ? Math.ceil(n) : Math.floor(n); }
function mod(x, y) { return x % y; }
function modInt(x, y) { if (y == 0) er("Division by zero"); var n = x % y; return n < 0 ? Math.ceil(n) : Math.floor(n); }
function lt(x, y) { return x < y; }
function le(x, y) { return x <= y; }

// Characters

function isLower(c) { return c >= 'a' && c <= 'z'; }
function isUpper(c) { return c >= 'A' && c <= 'Z'; }
function isAlpha(c) { return isLower(c) || isUpper(c); }
function isDigit(c) { return c >= '0' && c <= '9'; }
function isAlnum(c) { return isAlpha(c) || isDigit(c); }
function isBlank(c) { return c == ' ' || c == '\t'; }
function isSpace(c) { return isBlank(c) || c == '\r' || c == '\n'; }
function isXdigit(c) { return isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'); }
function ord(c) { return c.charCodeAt(0); }
function isPrint(c) { return ord(c) > 31 && ord(c) < 127; }
function toLower(c) { return c.toLowerCase(); }
function toUpper(c) { return c.toUpperCase(); }

// Lists

function cons(v, ls) {
    return { next : ls, data : v };
}
function rev(ls) {
    var acc = null;
    for (; ls; ls = ls.next)
       acc = cons(ls.data, acc);
    return acc;
}
function concat(ls1, ls2) {
    var acc = ls2;
    ls1 = rev(ls1);
    for (; ls1; ls1 = ls1.next)
        acc = cons(ls1.data, acc);
    return acc;
}
function member(x, ls) {
    for (; ls; ls = ls.next)
        if (ls.data == x)
            return true;
    return false;
}
function remove(x, ls) {
    var acc = null;

    for (; ls; ls = ls.next)
        if (ls.data == x)
            return concat(acc, ls.next);
        else
            acc = cons(ls.data, acc);

    return ls;
}
function union(ls1, ls2) {
    var acc = ls2;

    for (; ls1; ls1 = ls1.next)
        if (!member(ls1.data, ls2))
            acc = cons(ls1.data, acc);

    return acc;
}
function length(ls) {
    var acc = 0;

    for (; ls; ls = ls.next)
        ++acc;

    return acc;
}


// Floats

function float(n) {
    return n;
}

function trunc(n) {
    return ~~n;
}

function ceil(n) {
    return Math.ceil(n);
}

function round(n) {
    return Math.round(n);
}

function pow(n, m) {
    return Math.pow(n, m);
}


// Time, represented as counts of microseconds since the epoch

var time_format = "%c";

function showTime(tm) {
    return strftime(time_format, tm);
}

function showTimeHtml(tm) {
    return eh(showTime(tm));
}

function now() {
    return (new Date()).getTime() * 1000;
}

function diffInSeconds(tm1, tm2) {
    return Math.round((tm2 - tm1) / 1000000);
}

function diffInMilliseconds(tm1, tm2) {
    return Math.round((tm2 - tm1) / 1000);
}

function toSeconds(tm) {
    return Math.round(tm / 1000000);
}

function toMilliseconds(tm) {
    return Math.round(tm / 1000);
}

function fromMilliseconds(tm) {
    return tm * 1000;
}

function addSeconds(tm, n) {
    return tm + n * 1000000;
}

function stringToTime_error(string) {
    var t = Date.parse(string);
    if (isNaN(t))
        er("Invalid date string: " + string);
    else
        return t * 1000;
}

function stringToTime(string) {
    try {
        var t = Date.parse(string);
        if (isNaN(t))
            return null;
        else
            return t * 1000;
    } catch (e) {
        return null;
    }
}

/*
strftime() implementation from:
YUI 3.4.1 (build 4118)
Copyright 2011 Yahoo! Inc. All rights reserved.
Licensed under the BSD License.
http://yuilibrary.com/license/
*/

var xPad=function (x, pad, r)
{
    if(typeof r === "undefined")
    {
	r=10;
    }
    pad = pad.toString();
    for( ; parseInt(x, 10)<r && r>1; r/=10) {
	x = pad + x;
    }
    return x.toString();
};

var YDateEn = {
    a: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    A: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    b: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    B: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    c: "%a %d %b %Y %T %Z",
    p: ["AM", "PM"],
    P: ["am", "pm"],
    r: "%I:%M:%S %p",
    x: "%d/%m/%y",
    X: "%T"
};

var Dt = {
    formats: {
	a: function (d, l) { return l.a[d.getDay()]; },
	A: function (d, l) { return l.A[d.getDay()]; },
	b: function (d, l) { return l.b[d.getMonth()]; },
	B: function (d, l) { return l.B[d.getMonth()]; },
	C: function (d) { return xPad(parseInt(d.getFullYear()/100, 10), 0); },
	d: ["getDate", "0"],
	e: ["getDate", " "],
	g: function (d) { return xPad(parseInt(Dt.formats.G(d)%100, 10), 0); },
	G: function (d) {
	    var y = d.getFullYear();
	    var V = parseInt(Dt.formats.V(d), 10);
	    var W = parseInt(Dt.formats.W(d), 10);

	    if(W > V) {
		y++;
	    } else if(W===0 && V>=52) {
		y--;
	    }

	    return y;
	},
	H: ["getHours", "0"],
	I: function (d) { var I=d.getHours()%12; return xPad(I===0?12:I, 0); },
	j: function (d) {
	    var gmd_1 = new Date("" + d.getFullYear() + "/1/1 GMT");
	    var gmdate = new Date("" + d.getFullYear() + "/" + (d.getMonth()+1) + "/" + d.getDate() + " GMT");
	    var ms = gmdate - gmd_1;
	    var doy = parseInt(ms/60000/60/24, 10)+1;
	    return xPad(doy, 0, 100);
	},
	k: ["getHours", " "],
	l: function (d) { var I=d.getHours()%12; return xPad(I===0?12:I, " "); },
	m: function (d) { return xPad(d.getMonth()+1, 0); },
	M: ["getMinutes", "0"],
	p: function (d, l) { return l.p[d.getHours() >= 12 ? 1 : 0 ]; },
	P: function (d, l) { return l.P[d.getHours() >= 12 ? 1 : 0 ]; },
	s: function (d, l) { return parseInt(d.getTime()/1000, 10); },
	S: ["getSeconds", "0"],
	u: function (d) { var dow = d.getDay(); return dow===0?7:dow; },
	U: function (d) {
	    var doy = parseInt(Dt.formats.j(d), 10);
	    var rdow = 6-d.getDay();
	    var woy = parseInt((doy+rdow)/7, 10);
	    return xPad(woy, 0);
	},
	V: function (d) {
	    var woy = parseInt(Dt.formats.W(d), 10);
	    var dow1_1 = (new Date("" + d.getFullYear() + "/1/1")).getDay();
	    var idow = woy + (dow1_1 > 4 || dow1_1 <= 1 ? 0 : 1);
	    if(idow === 53 && (new Date("" + d.getFullYear() + "/12/31")).getDay() < 4)
	    {
		idow = 1;
	    }
	    else if(idow === 0)
	    {
		idow = Dt.formats.V(new Date("" + (d.getFullYear()-1) + "/12/31"));
	    }

	    return xPad(idow, 0);
	},
	w: "getDay",
	W: function (d) {
	    var doy = parseInt(Dt.formats.j(d), 10);
	    var rdow = 7-Dt.formats.u(d);
	    var woy = parseInt((doy+rdow)/7, 10);
	    return xPad(woy, 0, 10);
	},
	y: function (d) { return xPad(d.getFullYear()%100, 0); },
	Y: "getFullYear",
	z: function (d) {
	    var o = d.getTimezoneOffset();
	    var H = xPad(parseInt(Math.abs(o/60), 10), 0);
	    var M = xPad(Math.abs(o%60), 0);
	    return (o>0?"-":"+") + H + M;
	},
	Z: function (d) {
	    var tz = d.toString().replace(/^.*:\d\d( GMT[+-]\d+)? \(?([A-Za-z ]+)\)?\d*$/, "$2").replace(/[a-z ]/g, "");
	    if(tz.length > 4) {
		tz = Dt.formats.z(d);
	    }
	    return tz;
	},
	"%": function (d) { return "%"; }
    },

    aggregates: {
	c: "locale",
	D: "%m/%d/%y",
	F: "%Y-%m-%d",
	h: "%b",
	n: "\n",
	r: "%I:%M:%S %p",
	R: "%H:%M",
	t: "\t",
	T: "%H:%M:%S",
	x: "locale",
	X: "locale"
    },

    format : function (oDate, format) {
	var replace_aggs = function (m0, m1) {
	    var f = Dt.aggregates[m1];
	    return (f === "locale" ? YDateEn[m1] : f);
	};

	var replace_formats = function (m0, m1) {
	    var f = Dt.formats[m1];
	    switch(typeof f) {
	    case "string":
		return oDate[f]();
	    case "function":
		return f.call(oDate, oDate, YDateEn);
	    case "array":
            case "object":
		if(typeof(f[0]) === "string")
		    return xPad(oDate[f[0]](), f[1]);
	    default:
		return m1;
	    }
	};

	while(format.match(/%[cDFhnrRtTxX]/)) {
	    format = format.replace(/%([cDFhnrRtTxX])/g, replace_aggs);
	}

	var str = format.replace(/%([aAbBCdegGHIjklmMpPsSuUVwWyYzZ%])/g, replace_formats);

	replace_aggs = replace_formats = undefined;

	return str;
    }
};

// End of YUI code

function strftime(fmt, thisTime)
{
    var thisDate = new Date();
    thisDate.setTime(Math.floor(thisTime / 1000));
    return Dt.format(thisDate, fmt);
};

function fromDatetime(year, month, date, hour, minute, second) {
  return (new Date(year, month, date, hour, minute, second)).getTime() * 1000;
};

function datetimeYear(t) {
  return (new Date(t / 1000)).getYear() + 1900;
};

function datetimeMonth(t) {
  return (new Date(t / 1000)).getMonth();
};

function datetimeDay(t) {
  return (new Date(t / 1000)).getDate();
};

function datetimeHour(t) {
  return (new Date(t / 1000)).getHours();
};

function datetimeMinute(t) {
  return (new Date(t / 1000)).getMinutes();
};

function datetimeSecond(t) {
  return (new Date(t / 1000)).getSeconds();
};

function datetimeDayOfWeek(t) {
  return (new Date(t / 1000)).getDay();
};


// Error handling

function uw_debug(msg) {
    try {
        console.debug(msg);
    } catch (e) {
        alert("DEBUG: " + msg);
    }

    return 0;
}

function whine(msg) {
    alert(msg);
    throw msg;
}

function pf(loc) {
    throw ("Pattern match failure (" + loc + ")");
}

var lameDuck = false;

function runHandlers(kind, ls, arg) {
    if (!lameDuck) {
        if (ls == null)
            alert(kind + ": " + arg);
        for (; ls; ls = ls.next)
            try {
                exec({c:"a", f:{c:"a", f:ls.data, x:{c:"c", v:arg}}, x:{c:"c", v:null}});
            } catch (v) { }
    }
}

var errorHandlers = null;

function flift0(v) {
    return {c:"c", v:v};
}

function onError(f) {
    errorHandlers = cons(flift0(f), errorHandlers);
}

function er(s) {
    runHandlers("Error", errorHandlers, s);
    throw {uw_error: s};
}

var failHandlers = null;

function onFail(f) {
    failHandlers = cons(flift0(f), failHandlers);
}

function doExn(v) {
    if (v == null || v.uw_error == null) {
        var s = (v == null ? "null" : v.message ? v.message : v.toString());
        if (v != null && v.fileName && v.lineNumber)
            s += " (" + v.fileName + ":" + v.lineNumber + ")";
        runHandlers("Fail", failHandlers, s);
    }
}

var disconnectHandlers = null;

function flift(f) {
    return {c: "c", v:{env:cons(f,null), body:{c:"v", n:1}}};
}

function onDisconnect(f) {
    disconnectHandlers = cons(flift(f), disconnectHandlers);
}

function discon() {
    runHandlers("Disconnect", disconnectHandlers, null);
}

var connectHandlers = null;

function onConnectFail(f) {
    connectHandlers = cons(flift(f), connectHandlers);
}

function conn(msg) {
    var rx = /(.*)<body>((.|\n|\r)*)<\/body>(.*)/g;
    var arr = rx.exec(msg);
    msg = (arr && arr.length >= 3) ? arr[2] : msg;
    runHandlers("RPC failure", connectHandlers, msg);
}

var serverHandlers = null;

function onServerError(f) {
    serverHandlers = cons(flift0(f), serverHandlers);
}

function servErr(s) {
    window.setTimeout(function () { runHandlers("Server", serverHandlers, s); }, 0);
}

// Key and mouse events

var uw_event = null;

function uw_getEvent() {
    return window.event ? window.event : uw_event;
}

function firstGood(x, y) {
    if (x == undefined || x == 0)
        return y;
    else
        return x;
}

function uw_mouseEvent() {
    var ev = uw_getEvent();

    return {_ScreenX : firstGood(ev.screenX, 0),
            _ScreenY : firstGood(ev.screenY, 0),
            _ClientX : firstGood(ev.clientX, 0),
            _ClientY : firstGood(ev.clientY, 0),
            _CtrlKey : firstGood(ev.ctrlKey, false),
            _ShiftKey : firstGood(ev.shiftKey, false),
            _AltKey : firstGood(ev.altKey, false),
            _MetaKey : firstGood(ev.metaKey, false),
            _Button : ev.button == 2 ? "Right" : ev.button == 1 ? "Middle" : "Left"};
}

function uw_keyEvent() {
    var ev = uw_getEvent();

    return {_KeyCode : firstGood(ev.keyCode, ev.which),
            _CtrlKey : firstGood(ev.ctrlKey, false),
            _ShiftKey : firstGood(ev.shiftKey, false),
            _AltKey : firstGood(ev.altKey, false),
            _MetaKey : firstGood(ev.metaKey, false)};
}



// Document events

function uw_handler(name, f) {
    var old = document[name];
    if (old == undefined)
        document[name] = function(event) { uw_event = event; execF(execF(f, uw_mouseEvent())); };
    else
        document[name] = function(event) { uw_event = event; old(); execF(execF(f, uw_mouseEvent())); };
}

function uw_onClick(f) {
    uw_handler("onclick", f);
}

function uw_onContextmenu(f) {
    uw_handler("oncontextmenu", f);
}

function uw_onDblclick(f) {
    uw_handler("ondblclick", f);
}

function uw_onMousedown(f) {
    uw_handler("onmousedown", f);
}

function uw_onMouseenter(f) {
    uw_handler("onmouseenter", f);
}

function uw_onMouseleave(f) {
    uw_handler("onmouseleave", f);
}

function uw_onMousemove(f) {
    uw_handler("onmousemove", f);
}

function uw_onMouseout(f) {
    uw_handler("onmouseout", f);
}

function uw_onMouseover(f) {
    uw_handler("onmouseover", f);
}

function uw_onMouseup(f) {
    uw_handler("onmouseup", f);
}

function uw_keyHandler(name, f) {
    var old = document[name];
    if (old == undefined)
        document[name] = function(event) { uw_event = event; execF(execF(f, uw_keyEvent())); };
    else
        document[name] = function(event) { uw_event = event; old(); execF(execF(f, uw_keyEvent())); };
}

function uw_onKeydown(f) {
    uw_keyHandler("onkeydown", f);
}

function uw_onKeypress(f) {
    uw_keyHandler("onkeypress", f);
}

function uw_onKeyup(f) {
    uw_keyHandler("onkeyup", f);
}

// Cancelling of further event processing

function uw_preventDefault() {
    var e = window.event ? window.event : uw_event;
    e.returnValue = false;
    if (e.preventDefault) e.preventDefault();
}

function uw_stopPropagation() {
    var e = window.event ? window.event : uw_event;
    e.cancelBubble = true;
    if (e.stopPropagation) e.stopPropagation();
}

// Embedding closures in XML strings

function cs(f) {
    return {closure: f};
}

function isWeird(v) {
    return v.closure != null || v.cat1 != null;
}

function cat(s1, s2) {
    if (isWeird(s1) || isWeird(s2))
        return {cat1: s1, cat2: s2};
    else
        return s1 + s2;
}

var closures = [];
var freeClosures = null;

function newClosure(f) {
    var n;
    if (freeClosures == null) {
        n = closures.length;
    } else {
        n = freeClosures.data;
        freeClosures = freeClosures.next;
    }
    closures[n] = f;
    return n;
}

function freeClosure(n) {
    closures[n] = null;
    freeClosures = cons(n, freeClosures);
}

function cr(n) {
    return closures[n];
}

function flattenAcc(a, cls, trs) {
    while (trs) {
        var tr = trs.data;
        trs = trs.next;

        if (tr.cat1 != null) {
            trs = cons(tr.cat1, cons(tr.cat2, trs));
        } else if (tr.closure != null) {
            var cl = newClosure(tr.closure);
            cls.v = cons(cl, cls.v);
            a.push("cr(", cl.toString(), ")");
        } else
            a.push(tr);
    }
}

function flatten(cls, tr) {
    var a = [];
    flattenAcc(a, cls, cons(tr, null));
    return a.join("");
}

function flattenLocal(s) {
    var cls = {v : null};
    var r = flatten(cls, s);
    for (cl = cls.v; cl != null; cl = cl.next)
        freeClosure(cl.data);
    return r;
}


// Dynamic tree management

function populate(node) {
    var s = node.signal;
    var oldSources = node.sources;
    try {
        var sr = execF(s, null);
        var newSources = sr._sources;

        for (var sp = oldSources; sp; sp = sp.next)
            if (!member(sp.data, newSources))
                sp.data.dyns = remove(node, sp.data.dyns);

        for (var sp = newSources; sp; sp = sp.next)
            if (!member(sp.data, oldSources))
                sp.data.dyns = cons(node, sp.data.dyns);

        node.sources = newSources;
        node.recreate(sr._data);
    } catch (v) {
        doExn(v);
    }
}

function sc(v) {
    return {data : v, dyns : null};
}
function sv(s, v) {
    if (s.data != v) {
        s.data = v;

        for (var ls = s.dyns; ls; ls = ls.next)
            if (!ls.dead)
                populate(ls.data);
    }
}
function sg(s) {
    return s.data;
}

function ss(s) {
    return {env:cons(s, null), body:{c:"r", l:
            cons({n:"sources", v:{c:"c", v:cons(s, null)}},
                 cons({n:"data", v:{c:"f", f:sg, a:cons({c:"v", n:1}, null)}}, null))}};
}
function sr(v) {
    return {env:null, body:{c:"c", v:{_sources : null, _data : v}}};
}
function sb(x,y) {
    return {env:cons(y,cons(x,null)),
            body:{c:"=",
                e1:{c:"a", f:{c:"v", n:2}, x:{c:"c", v:null}},
                e2:{c:"=",
                    e1:{c:"a",
                        f:{c:"a", f:{c:"v", n:2}, x:{c:".", r:{c:"v", n:0}, f:"data"}},
                        x:{c:"c", v:null}},
                    e2:{c:"r", l:cons(
                                      {n:"sources", v:{c:"f", f:union, a:cons({c:".", r:{c:"v", n:1}, f:"sources"},
                                                                              cons({c:".", r:{c:"v", n:0}, f:"sources"}, null))}},
                                      cons({n:"data", v:{c:".", r:{c:"v", n:0}, f:"data"}}, null))}}}};
}
function scur(s) {
    return execF(s, null)._data;
}

function lastParent() {
    var pos = document.body;

    while (pos.lastChild && pos.lastChild.nodeType == 1)
        pos = pos.lastChild;

    pos = pos.parentNode;

    return pos;
}

var thisScript = null;

function addNode(node) {
    if (thisScript) {
        if (thisScript.parentNode)
            thisScript.parentNode.replaceChild(node, thisScript);
    } else
        lastParent().appendChild(node);
}

function runScripts(node) {
    if (node.tagName == "SCRIPT") {
        var savedScript = thisScript;
        thisScript = node;

        try {
            eval(thisScript.text);
        } catch (v) {
            doExn(v);
        }
        if (thisScript.parentNode)
            thisScript.parentNode.removeChild(thisScript);

        thisScript = savedScript;
    } else if (node.getElementsByTagName) {
        var savedScript = thisScript;

        var scripts = node.getElementsByTagName("script"), scriptsCopy = [];
        var len = scripts.length;
        for (var i = 0; i < len; ++i)
            scriptsCopy[i] = scripts[i];
        for (var i = 0; i < len; ++i) {
            thisScript = scriptsCopy[i];

            try {
                eval(thisScript.text);
            } catch (v) {
                doExn(v);
            }
            if (thisScript.parentNode)
                thisScript.parentNode.removeChild(thisScript);
        }

        thisScript = savedScript;
    }
}


// Dynamic tree entry points

function killScript(scr) {
    scr.dead = true;
    for (var ls = scr.sources; ls; ls = ls.next)
        ls.data.dyns = remove(scr, ls.data.dyns);
    for (var ls = scr.closures; ls; ls = ls.next)
        freeClosure(ls.data);
}

// Sometimes we wind up with tables that contain <script>s outside the single <tbody>.
// To avoid dealing with that case, we normalize by moving <script>s into <tbody>.
function normalizeTable(table) {
    var orig = table;

    var script, next;

    while (table && table.tagName != "TABLE")
        table = table.parentNode;

    for (var tbody = table.firstChild; tbody; tbody = tbody.nextSibling) {
        if (tbody.tagName == "TBODY") {
            var firstChild = tbody.firstChild;

            for (script = table.firstChild; script && script != tbody; script = next) {
                next = script.nextSibling;

                if (firstChild)
                    tbody.insertBefore(script, firstChild);
                else
                    tbody.appendChild(script);
            }

            return;
        }
    }

    var tbody = document.createElement("tbody");
    for (script = table.firstChild; script; script = next) {
        next = script.nextSibling;

        tbody.appendChild(script);
    }
    table.appendChild(tbody);
}

var suspendScripts = false;

function dyn(pnode, s) {
    if (suspendScripts)
        return;

    var x = document.createElement("script");
    x.dead = false;
    x.signal = s;
    x.sources = null;
    x.closures = null;

    var firstChild = null;

    x.recreate = function(v) {
        for (var ls = x.closures; ls; ls = ls.next)
            freeClosure(ls.data);

        var next;
        for (var child = firstChild; child && child != x; child = next) {
            next = child.nextSibling;

            killScript(child);
            if (child.getElementsByTagName) {
                var arr = child.getElementsByTagName("script");
                for (var i = 0; i < arr.length; ++i)
                    killScript(arr[i]);
            }

            if (child.parentNode)
                child.parentNode.removeChild(child);
        }

        var cls = {v : null};
        var html = flatten(cls, v);
        if (pnode != "table" && pnode != "tr")
            html = dynPrefix + html;
        x.closures = cls.v;

        if (pnode == "table") {
            normalizeTable(x.parentNode);

            var dummy = document.createElement("body");
            suspendScripts = true;
            try {
                dummy.innerHTML = "<table>" + html + "</table>";
            } catch (e) {
                suspendScripts = false;
                throw e;
            }

            var table = x.parentNode;

            if (table) {
                firstChild = null;
                var tbody;

                var arr = dummy.getElementsByTagName("tbody");

                var tbody;
                if (arr.length > 0 && arr[0].parentNode == dummy.firstChild) {
                    tbody = arr[0];
                    var next;
                    for (var node = dummy.firstChild.firstChild; node; node = next) {
                        next = node.nextSibling;

                        if (node.tagName != "TBODY")
                            tbody.appendChild(node);
                    }
                } else
                    tbody = dummy.firstChild;

                var next;
                firstChild = document.createElement("script");
                table.insertBefore(firstChild, x);
                for (var node = tbody.firstChild; node; node = next) {
                    next = node.nextSibling;
                    table.insertBefore(node, x);
                    suspendScripts = false;
                    runScripts(node);
                    suspendScripts = true;
                }
            }

            suspendScripts = false;
        } else if (pnode == "tr") {
            var dummy = document.createElement("body");
            suspendScripts = true;
            try {
                dummy.innerHTML = "<table><tr>" + html + "</tr></table>";
            } catch (e) {
                suspendScripts = false;
                throw e;
            }

            var table = x.parentNode;

            if (table) {
                var arr = dummy.getElementsByTagName("tr");
                firstChild = null;
                var tr;
                if (arr.length > 0 && table != null)
                    tr = arr[0];
                else
                    tr = dummy.firstChild;

                var next;
                firstChild = document.createElement("script");
                table.insertBefore(firstChild, x);
                for (var node = tr.firstChild; node; node = next) {
                    next = node.nextSibling;
                    table.insertBefore(node, x);
                    suspendScripts = false;
                    runScripts(node);
                    suspendScripts = true;
                }
            };

            suspendScripts = false;
        } else {
            firstChild = document.createElement("span");

            suspendScripts = true;
            try {
                firstChild.innerHTML = html;
                if (x.parentNode)
                    x.parentNode.insertBefore(firstChild, x);
            } catch (e) {
                suspendScripts = false;
                throw e;
            }
            suspendScripts = false;
            runScripts(firstChild);
        }
    };

    addNode(x);
    populate(x);
}

function setInnerHTML(node, html) {
    var x;

    if (node.previousSibling && node.previousSibling.closures != undefined) {
        x = node.previousSibling;

        for (var ls = x.closures; ls; ls = ls.next)
            freeClosure(ls.data);

        if (node.getElementsByTagName) {
            var arr = node.getElementsByTagName("script");
            for (var i = 0; i < arr.length; ++i)
                killScript(arr[i]);
        }
    } else {
        x = document.createElement("script");
        x.dead = false;
        x.sources = null;

        if (node.parentNode)
            node.parentNode.insertBefore(x, node);
        else
            whine("setInnerHTML: node is not already in the DOM tree");
    }

    var cls = {v : null};
    var html = flatten(cls, html);
    x.closures = cls.v;
    suspendScripts = true;
    node.innerHTML = html;
    suspendScripts = false;
    runScripts(node);
}

var maySuspend = true;

function active(s) {
    if (suspendScripts)
        return;

    var ms = maySuspend;
    maySuspend = false;
    try {
        var html = execF(s);
    } catch (e) {
        maySuspend = ms;
        throw e;
    }
    maySuspend = ms;
    if (html != "") {
        var span = document.createElement("span");
        addNode(span);
        setInnerHTML(span, html);
    }
}

function input(x, s, recreate, type, name) {
    if (name) x.name = name;
    if (type) x.type = type;
    x.dead = false;
    x.signal = ss(s);
    x.sources = null;
    x.recreate = recreate(x);
    addNode(x);
    populate(x);

    return x;
}

function inpt(type, s, name) {
    if (suspendScripts)
        return;

    var x = input(document.createElement("input"), s,
                  function(x) { return function(v) { if (x.value != v) x.value = v; }; }, type, name);
    x.value = s.data;
    x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, x.value) };

    return x;
}

function inp(s, name) {
    return inpt("text", s, name);
}

function password(s, name) {
    return inpt("password", s, name);
}

function email(s, name) {
    return inpt("email", s, name);
}

function search(s, name) {
    return inpt("search", s, name);
}

function url(s, name) {
    return inpt("url", s, name);
}

function tel(s, name) {
    return inpt("tel", s, name);
}

function color(s, name) {
    return inpt("color", s, name);
}

function number(s, name) {
    return inpt("number", s, name);
}

function range(s, name) {
    return inpt("range", s, name);
}

function date(s, name) {
    return inpt("date", s, name);
}

function datetime(s, name) {
    return inpt("datetime", s, name);
}

function datetime_local(s, name) {
    return inpt("datetime-local", s, name);
}

function month(s, name) {
    return inpt("month", s, name);
}

function week(s, name) {
    return inpt("week", s, name);
}

function time(s, name) {
    return inpt("time", s, name);
}


function selectValue(x) {
    if (x.options.length == 0)
        return "";
    else
        return x.options[x.selectedIndex].value;
}

function setSelectValue(x, v) {
  for (var i = 0; i < x.options.length; ++i) {
      if(x.options[i].value == v) {
          x.selectedIndex = i;
          return;
      }
  }
}

function sel(s, content) {
    if (suspendScripts)
        return;

    var dummy = document.createElement("span");
    dummy.innerHTML = "<select>" + content + "</select>";
    var x = input(dummy.firstChild, s, function(x) { return function(v) { if (selectValue(x) != v) setSelectValue(x, v); }; });

    for (var i = 0; i < x.options.length; ++i) {
        if (x.options[i].value == "")
            x.options[i].value = x.options[i].text;
        else
            x.options[i].value = x.options[i].value.substring(1);
    }

    setSelectValue(x, s.data);
    if (selectValue(x) != s.data)
        sv(s, selectValue(x));
    x.onchange = function() { sv(s, selectValue(x)) };

    return x;
}

function chk(s) {
    if (suspendScripts)
        return;

    var x = input(document.createElement("input"), s,
                  function(x) { return function(v) { if (x.checked != v) x.checked = v; }; }, "checkbox");
    x.defaultChecked = x.checked = s.data;
    x.onclick = x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, x.checked) };

    return x;
}

function tbx(s) {
    if (suspendScripts)
        return;

    var x = input(document.createElement("textarea"), s,
                  function(x) { return function(v) { if (x.value != v) x.value = v; }; });
    x.innerHTML = s.data;
    x.onkeyup = x.oninput = x.onchange = x.onpropertychange = function() { sv(s, x.value) };

    return x;
}

function dynClass(pnode, html, s_class, s_style) {
    if (suspendScripts)
        return;

    var htmlCls = {v : null};
    html = flatten(htmlCls, html);
    htmlCls = htmlCls.v;

    var dummy = document.createElement(pnode);
    suspendScripts = true;
    dummy.innerHTML = html;
    suspendScripts = false;
    var html = dummy.firstChild;
    dummy.removeChild(html);
    if (pnode == "table" && html.tagName == "TBODY") {
        html = html.firstChild;
    }
    addNode(html);
    runScripts(html);

    if (s_class) {
        var x = document.createElement("script");
        x.dead = false;
        x.signal = s_class;
        x.sources = null;
        x.closures = htmlCls;

        x.recreate = function(v) {
            for (var ls = x.closures; ls != htmlCls; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            html.className = flatten(cls, v);
	    x.closures = concat(cls.v, htmlCls);
        }

        html.appendChild(x);
        populate(x);
    }

    if (s_style) {
        var htmlCls2 = s_class ? null : htmlCls;
        var y = document.createElement("script");
        y.dead = false;
        y.signal = s_style;
        y.sources = null;
        y.closures = htmlCls2;

        y.recreate = function(v) {
            for (var ls = y.closures; ls != htmlCls2; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            html.style.cssText = flatten(cls, v);
	    y.closures = concat(cls.v, htmlCls2);
        }

        html.appendChild(y);
        populate(y);
    }
}

function bodyDynClass(s_class, s_style) {
    if (suspendScripts)
        return;

    var htmlCls = null;

    if (s_class) {
        var x = document.createElement("script");
        x.dead = false;
        x.signal = s_class;
        x.sources = null;
        x.closures = htmlCls;

        x.recreate = function(v) {
            for (var ls = x.closures; ls != htmlCls; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            document.body.className = flatten(cls, v);
            console.log("className to + " + document.body.className);
	    x.closures = concat(cls.v, htmlCls);
        }

        document.body.appendChild(x);
        populate(x);
    }

    if (s_style) {
        var htmlCls2 = s_class ? null : htmlCls;
        var y = document.createElement("script");
        y.dead = false;
        y.signal = s_style;
        y.sources = null;
        y.closures = htmlCls2;

        y.recreate = function(v) {
            for (var ls = y.closures; ls != htmlCls2; ls = ls.next)
                freeClosure(ls.data);

            var cls = {v : null};
            document.body.style.cssText = flatten(cls, v);
            console.log("style to + " + document.body.style.cssText);
	    y.closures = concat(cls.v, htmlCls2);
        }

        document.body.appendChild(y);
        populate(y);
    }
}

function addOnChange(x, f) {
    var old = x.onchange;
    if (old == null)
        x.onchange = f;
    else
        x.onchange = function() { old(); f(); };
}

function addOnKeyUp(x, f) {
    var old = x.onkeyup;
    if (old == null)
        x.onkeyup = f;
    else
        x.onkeyup = function(x) { old(x); f(x); };
}


// Basic string operations

function eh(x) {
    if (x == null)
        return "NULL";
    else
        return x.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
}

function ts(x) { return x.toString() }
function bs(b) { return (b ? "True" : "False") }
function s2b(s) { return s == "True" ? true : s == "False" ? false : null; }
function s2be(s) { return s == "True" ? true : s == "False" ? false : er("Illegal Boolean " ^ s); }

function id(x) { return x; }
function sub(s, i) { return s.charAt(i); }
function suf(s, i) { return s.substring(i); }
function slen(s) { return s.length; }
function sidx(s, ch) {
    var r = s.indexOf(ch);
    if (r == -1)
        return null;
    else
        return r;
}
function ssidx(h, n) {
    var r = h.indexOf(n);
    if (r == -1)
        return null;
    else
        return r;
}
function sspn(s, chs) {
    for (var i = 0; i < s.length; ++i)
        if (chs.indexOf(s.charAt(i)) != -1)
            return i;

    return s.length;
}
function schr(s, ch) {
    var r = s.indexOf(ch);
    if (r == -1)
        return null;
    else
        return s.substring(r);
}
function ssub(s, start, len) {
    return s.substring(start, start+len);
}
function strlenGe(s, len) {
    return s.length >= len;
}

function trimZeroes(s) {
    for (var i = 0; i < s.length; ++i)
        if (s.charAt(i) != '0') {
            if (i > 0)
                return s.substring(i);
            else
                return s;
        }

    if (s.length == 0)
        return s;
    else
        return "0";
}

function pi(s) {
    var st = trimZeroes(s);
    var r = parseInt(st);
    if (r.toString() == st)
        return r;
    else
        er("Can't parse int: " + s);
}

function pfl(s) {
    var r = parseFloat(s);
    if (r.toString() == s)
        return r;
    else
        er("Can't parse float: " + s);
}

function pio(s) {
    var st = trimZeroes(s);
    var r = parseInt(st);
    if (r.toString() == st)
        return r;
    else
        return null;
}

function pflo(s) {
    var r = parseFloat(s);
    if (r.toString() == s)
        return r;
    else
        return null;
}

function parseSource(s1, s2) {
    return eval("s" + s1 + "_" + s2);
}

function uf(s) {
    if (s.length == 0)
        return "_";
    s = s.replace(/\./g, ".2E");
    return (s.charAt(0) == '_' ? "_" : "") + encodeURIComponent(s).replace(/%/g, ".");
}

function uu(s) {
    if (s.length > 0 && s.charAt(0) == '_') {
        s = s.substring(1);
    } else if (s.length >= 3 && (s.charAt(0) == '%' || s.charAt(0) == '.')
               && s.charAt(1) == '5' && (s.charAt(2) == 'f' || s.charAt(2) == 'F'))
        s = s.substring(3);
    s = s.replace(/\+/g, " ");
    s = s.replace(/\./g, "%");
    return decodeURIComponent(s);
}

function atr(s) {
    return s.replace(/\"/g, "&quot;").replace(/&/g, "&amp;")
}

function ub(b) {
    return b ? "1" : "0";
}

function uul(getToken, getData) {
    var tok = getToken();
    if (tok == "Nil") {
        return null;
    } else if (tok == "Cons") {
        var d = getData();
        var l = uul(getToken, getData);
        return {_1:d, _2:l};
    } else
        whine("Can't unmarshal list (" + tok + ")");
}

function strcmp(str1, str2) {
    return ((str1 == str2) ? 0 : ((str1 > str2) ? 1 : -1));
}

function chr(n) {
    return String.fromCharCode(n);
}

function htmlifySpecialChar(ch) {
    return "&#" + ch.charCodeAt(0) + ";";
}


// Remote calls

var client_id = null;
var client_pass = 0;
var url_prefix = "/";
var timeout = 60;
var isPost = false;

function getXHR(uri)
{
    try {
        return new XMLHttpRequest();
    } catch (e) {
        try {
            return new ActiveXObject("Msxml2.XMLHTTP");
        } catch (e) {
            try {
                return new ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {
                whine("Your browser doesn't seem to support AJAX.");
            }
        }
    }
}

var sig = null;

var unloading = false, inFlight = null;

function unload() {
    for (; inFlight; inFlight = inFlight.next) {
        inFlight.data.abort();
    }
}

function requestUri(xhr, uri, needsSig, isRpc) {
    var extraData = null;

    if (isRpc && uri.length > 2000) {
        extraData = uri.substring(2000);
        uri = uri.substring(0, 2000);
    }

    xhr.open("POST", uri, !unloading);
    xhr.setRequestHeader("Content-type", "text/plain");

    if (client_id != null) {
        xhr.setRequestHeader("UrWeb-Client", client_id.toString());
        xhr.setRequestHeader("UrWeb-Pass", client_pass.toString());
    }

    if (needsSig) {
        if (sig == null)
            whine("Missing cookie signature!");

        xhr.setRequestHeader("UrWeb-Sig", sig);
    }

    inFlight = cons(xhr, inFlight);
    xhr.send(extraData);
}

function xhrFinished(xhr) {
    xhr.abort();
    inFlight = remove(xhr, inFlight);
}

function unurlify(parse, s) {
    return parse(s);
}

function redirect(s) {
    window.location = s;
}

function makeSome(isN, v) {
    if (isN)
        return {v: v};
    else
        return v;
}

function rc(prefix, uri, parse, k, needsSig, isN) {
    if (!maySuspend)
        er("May not 'rpc' in main thread of 'code' for <active>");

    uri = cat(prefix, uri);
    uri = flattenLocal(uri);
    var xhr = getXHR();

    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4) {
            var isok = false;

            try {
                if (xhr.status == 200)
                    isok = true;
            } catch (e) { }

            if (isok) {
                var lines = xhr.responseText.split("\n");
                if (lines.length != 2) {
                    if (isN == null)
                        whine("Bad RPC response lines");
                    else
                        k(null);
                } else {
                    eval(lines[0]);

                    try {
                        var v = parse(lines[1]);
                        try {
                            k(makeSome(isN, v));
                        } catch (v) {
                            doExn(v);
                        }
                    } catch (v) {
                        k(null);
                    }
                }
            } else {
                if (isN == null)
                    conn(xhr.responseText);
                else
                    k(null);
            }

            xhrFinished(xhr);
        }
    };

    requestUri(xhr, uri, needsSig, true);
}

function path_join(s1, s2) {
    if (s1.length > 0 && s1.charAt(s1.length-1) == '/')
        return s1 + s2;
    else
        return s1 + "/" + s2;
}

var channels = [];

function newQueue() {
    return { front : null, back : null };
}
function enqueue(q, v) {
    if (q.front == null) {
        q.front = cons(v, null);
        q.back = q.front;
    } else {
        var node = cons(v, null);
        q.back.next = node;
        q.back = node;
    }
}
function dequeue(q) {
    if (q.front == null)
        return null;
    else {
        var r = q.front.data;
        q.front = q.front.next;
        if (q.front == null)
            q.back = null;
        return r;
    }
}

function newChannel() {
    return { msgs : newQueue(), listeners : newQueue() };
}

function listener() {
    var uri = path_join(url_prefix, ".msgs");
    var xhr = getXHR();
    var tid, orsc, onTimeout;

    var connect = function () {
        xhr.onreadystatechange = orsc;
        tid = window.setTimeout(onTimeout, timeout * 500);
        requestUri(xhr, uri, false, false);
    }

    orsc = function() {
        if (xhr.readyState == 4) {
            window.clearTimeout(tid);

            var isok = false;

            try {
                if (xhr.status == 200)
                    isok = true;
            } catch (e) { }

            if (isok) {
                var text = xhr.responseText;
                if (text == "")
                    return;
                var lines = text.split("\n");

                if (lines.length == 1 && lines[0] == "R") {
                    lameDuck = true;

                    if (isPost)
                        history.back();
                    else
                        location.reload();

                    return;
                }

                if (lines.length < 2) {
                    discon();
                    return;
                }

                var messageReader = function(i) {
                    if (i+1 >= lines.length) {
                        xhrFinished(xhr);
                        connect();
                    }
                    else {
                        var chn = lines[i];
                        var msg = lines[i+1];

                        if (chn == "E") {
                            eval(msg);
                            window.setTimeout(function() { messageReader(i+2); }, 0);
                        } else {
                            if (chn < 0)
                                whine("Out-of-bounds channel in message from remote server");

                            var ch;

                            if (chn >= channels.length || channels[chn] == null) {
                                ch = newChannel();
                                channels[chn] = ch;
                            } else
                                ch = channels[chn];

                            var listener = dequeue(ch.listeners);
                            if (listener == null) {
                                enqueue(ch.msgs, msg);
                            } else {
                                try {
                                    listener(msg);
                                } catch (v) {
                                    doExn(v);
                                }
                            }

                            messageReader(i+2);
                        }
                    }
                }

                messageReader(0);
            }
            else {
                try {
                    if (xhr.status != 0)
                        servErr("Error querying remote server for messages: " + xhr.status);
                } catch (e) { }
            }
        }
    };

    onTimeout = function() {
        xhrFinished(xhr);
        connect();
    };

    connect();
}

function rv(chn, parse, k) {
    if (!maySuspend)
        er("May not 'recv' in main thread of 'code' for <active>");

    if (chn == null)
        er("Client-side code tried to recv() from a channel belonging to a different page view.");

    if (chn < 0)
        whine("Out-of-bounds channel receive");

    var ch;

    if (chn >= channels.length || channels[chn] == null) {
        ch = newChannel();
        channels[chn] = ch;
    } else
        ch = channels[chn];

    var msg = dequeue(ch.msgs);
    if (msg == null) {
        enqueue(ch.listeners, function(msg) { k(parse(msg)); });
    } else {
        try {
            k(parse(msg));
        } catch (v) {
            doExn(v);
        }
    }
}

function sl(ms, k) {
    if (!maySuspend)
        er("May not 'sleep' in main thread of 'code' for <active>");

    window.setTimeout(function() { k(null); }, ms);
}

function sp(e) {
    window.setTimeout(function() { execF(e); }, 0);
}


// The Ur interpreter

var urfuncs = [];

function lookup(env, n) {
    while (env != null) {
        if (n == 0)
            return env.data;
        else {
            --n;
            env = env.next;
        }
    }

    whine("Out-of-bounds Ur variable reference");
}

function execP(env, p, v) {
    switch (p.c) {
    case "w":
        return env;
    case "v":
        return cons(v, env);
    case "c":
        if (v == p.v)
            return env;
        else
            return false;
    case "s":
        if (v == null)
            return false;
        else
            return execP(env, p.p, p.n ? v.v : v);
    case "1":
        if (v.n != p.n)
            return false;
        else
            return execP(env, p.p, v.v);
    case "r":
        for (var fs = p.l; fs != null; fs = fs.next) {
            env = execP(env, fs.data.p, v["_" + fs.data.n]);
            if (env == false)
                return false;
        }
        return env;
    default:
        whine("Unknown Ur pattern kind" + p.c);
    }
}

function exec0(env, e) {
    return exec1(env, null, e);
}

function exec1(env, stack, e) {
    var stack, usedK = false;

    var saveEnv = function() {
        if (stack.next != null && stack.next.data.c != "<")
            stack = cons({c: "<", env: env}, stack.next);
        else
            stack = stack.next;
    };

    while (true) {
        switch (e.c) {
        case "c":
            var v = e.v;
            if (stack == null)
                return v;
            var fr = stack.data;

            switch (fr.c) {
            case "s":
                e = {c: "c", v: {v: v}};
                stack = stack.next;
                break;
            case "1":
                e = {c: "c", v: {n: fr.n, v: v}};
                stack = stack.next;
                break;
            case "f":
                fr.args[fr.pos++] = v;
                if (fr.a == null) {
                    var res;
                    stack = stack.next;

                    if (fr.f.apply)
                        res = fr.f.apply(null, fr.args);
                    else if (fr.args.length == 0)
                        res = fr.f();
                    else if (fr.args.length == 1)
                        res = fr.f(fr.args[0]);
                    else if (fr.args.length == 2)
                        res = fr.f(fr.args[0], fr.args[1]);
                    else if (fr.args.length == 3)
                        res = fr.f(fr.args[0], fr.args[1], fr.args[2]);
                    else if (fr.args.length == 4)
                        res = fr.f(fr.args[0], fr.args[1], fr.args[2], fr.args[3]);
                    else if (fr.args.length == 5)
                        res = fr.f(fr.args[0], fr.args[1], fr.args[2], fr.args[3], fr.args[4]);
                    else
                        whine("Native function has " + fr.args.length + " args, but there is no special case for that count.");

                    e = {c: "c", v: res};
                    if (usedK) return null;
                } else {
                    e = fr.a.data;
                    fr.a = fr.a.next;
                }
                break;
            case "a1":
                e = fr.x;
                stack = cons({c: "a2", f: v}, stack.next);
                break;
            case "a2":
                if (fr.f == null)
                    whine("Ur: applying null function");
                else if (fr.f.body) {
                    saveEnv();
                    env = cons(v, fr.f.env);
                    e = fr.f.body;
                } else {
                    e = {c: "c", v: fr.f(v)};
                    stack = stack.next;
                }
                break;
            case "<":
                env = fr.env;
                stack = stack.next;
                break;
            case "r":
                fr.fs["_" + fr.n] = v;
                if (fr.l == null) {
                    e = {c: "c", v: fr.fs};
                    stack = stack.next;
                } else {
                    fr.n = fr.l.data.n;
                    e = fr.l.data.v;
                    fr.l = fr.l.next;
                }
                break;
            case ".":
                e = {c: "c", v: v["_" + fr.f]};
                stack = stack.next;
                break;
            case ";":
                e = fr.e2;
                stack = stack.next;
                break;
            case "=":
                saveEnv();
                env = cons(v, env);
                e = fr.e2;
                break;
            case "m":
                var ps;
                for (ps = fr.p; ps != null; ps = ps.next) {
                    var r = execP(env, ps.data.p, v);
                    if (r != false) {
                        saveEnv();
                        env = r;
                        e = ps.data.b;
                        break;
                    }
                }
                if (ps == null)
                    whine("Match failure in Ur interpretation");
                break;
            default:
                whine("Unknown Ur continuation kind " + fr.c);
            }

            break;
        case "v":
            e = {c: "c", v: lookup(env, e.n)};
            break;
        case "n":
            var idx = e.n;
            e = urfuncs[idx];
            if (e.c == "t")
                e = urfuncs[idx] = eval("(" + e.f + ")");
            break;
        case "s":
            stack = cons({c: "s"}, stack);
            e = e.v;
            break;
        case "1":
            stack = cons({c: "1", n: e.n}, stack);
            e = e.v;
            break;
        case "f":
            if (e.a == null)
                e = {c: "c", v: e.f()};
            else {
                var args = [];
                stack = cons({c: "f", f: e.f, args: args, pos: 0, a: e.a.next}, stack);
                if (!e.a.data.c) alert("[2] fr.f = " + e.f + "; 0 = " + e.a.data);
                e = e.a.data;
            }
            break;
        case "l":
            e = {c: "c", v: {env: env, body: e.b}};
            break;
        case "a":
            stack = cons({c: "a1", x: e.x}, stack);
            e = e.f;
            break;
        case "r":
            if (e.l == null)
                whine("Empty Ur record in interpretation");
            var fs = {};
            stack = cons({c: "r", n: e.l.data.n, fs: fs, l: e.l.next}, stack);
            e = e.l.data.v;
            break;
        case ".":
            stack = cons({c: ".", f: e.f}, stack);
            e = e.r;
            break;
        case ";":
            stack = cons({c: ";", e2: e.e2}, stack);
            e = e.e1;
            break;
        case "=":
            stack = cons({c: "=", e2: e.e2}, stack);
            e = e.e1;
            break;
        case "m":
            stack = cons({c: "m", p: e.p}, stack);
            e = e.e;
            break;
        case "e":
            e = {c: "c", v: cs({c: "wc", env: env, body: e.e})};
            break;
        case "wc":
            env = e.env;
            e = e.body;
            break;
        case "K":
            { var savedStack = stack.next, savedEnv = env;
                e = {c: "c", v: function(v) { return exec1(savedEnv, savedStack, {c: "c", v: v}); } };}
            usedK = true;
            break;
        default:
            whine("Unknown Ur expression kind " + e.c);
        }
    }
}

function execD(e) {
    return exec0(null, e);
}

function exec(e) {
    var r = exec0(null, e);

    if (r != null && r.body != null)
        return function(v) { return exec0(cons(v, r.env), r.body); };
    else
        return r;
}

function execF(f, x) {
    return exec0(cons(x, f.env), f.body);
}


// Wrappers

function confrm(s) {
    return confirm(s) ? true : false;
}


// URL blessing

var urlRules = null;

function checkUrl(s) {
    for (var r = urlRules; r; r = r.next) {
        var ru = r.data;
        if (ru.prefix ? s.indexOf(ru.pattern) == 0 : s == ru.pattern)
            return ru.allow ? s : null;
    }

    return null;
}

function bless(s) {
    u = checkUrl(s);
    if (u == null)
        er("Disallowed URL: " + s);
    return u;
}


// Attribute name blessing

function blessData(s) {
    for (var i = 0; i < s.length; ++i) {
        var c = s[i];
        if (!isAlnum(c) && c != '-' && c != '_')
            er("Disallowed character in data-* attribute name");
    }

    return s;
}


// CSS validation

function atom(s) {
    for (var i = 0; i < s.length; ++i) {
        var c = s[i];
        if (!isAlnum(c) && c != '+' && c != '-' && c != '.' && c != '%' && c != '#')
            er("Disallowed character in CSS atom");
    }

    return s;
}

function css_url(s) {
    for (var i = 0; i < s.length; ++i) {
        var c = s[i];
        if (!isAlnum(c) && c != ':' && c != '/' && c != '.' && c != '_' && c != '+'
            && c != '-' && c != '%' && c != '?' && c != '&' && c != '=' && c != '#')
            er("Disallowed character in CSS URL");
    }

    return s;
}

function property(s) {
    if (s.length <= 0)
        er("Empty CSS property");

    if (!isLower(s[0]) && s[0] != '_')
        er("Bad initial character in CSS property");

    for (var i = 0; i < s.length; ++i) {
        var c = s[i];
        if (!isLower(c) && !isDigit(c) && c != '_' && c != '-')
            er("Disallowed character in CSS property");
    }

    return s;
}


// ID generation

var nextId = 0;

function fresh() {
    return "uw" + (--nextId);
}

function giveFocus(id) {
    var node = document.getElementById(id);

    if (node)
        node.focus();
    else
        er("Tried to give focus to ID not used in document: " + id);
}


// App-specific code
urlRules = null;

urfuncs[2267] = {c:"t",f:'{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"c",v:""}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"f",f:cat,a:cons({c:"f",f:eh,a:cons({c:"v",n:1},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"\\074br />\\074script type=\\"text/javascript\\">dyn(\\"span\\", execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"n",n:2268},x:{c:"v",n:0}}},cons({c:"c",v:"))\\074/script>"},null))},null))},null))}},null))}}'};
urfuncs[2268] = {c:"t",f:'{c:"l",b:{c:"f",f:sb,a:cons({c:"f",f:ss,a:cons({c:"v",n:0},null)},cons({c:"l",b:{c:"f",f:sr,a:cons({c:"a",f:{c:"n",n:2267},x:{c:"v",n:0}},null)}},null))}}'};
urfuncs[2916] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"f",f:float,a:cons({c:"f",f:minus,a:cons({c:"v",n:1},cons({c:"c",v:1},null))},null)}}}'};
urfuncs[2917] = {c:"t",f:'{c:"l",b:{c:"c",v:0}}'};
urfuncs[2918] = {c:"t",f:'{c:"l",b:{c:"c",v:1}}'};
urfuncs[2850] = {c:"t",f:'{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"c",v:"Nil"}},cons({p:{c:"s",n:false,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Cons/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:0},f:"1"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"a",f:{c:"n",n:2850},x:{c:".",r:{c:"v",n:0},f:"2"}},null))},null))},null))}},null))}}'};
urfuncs[2855] = {c:"t",f:'{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"1",n:2863,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Done/"},cons({c:"m",e:{c:"v",n:0},p:null},null))}},cons({p:{c:"1",n:2864,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Mission/"},cons({c:"f",f:ub,a:cons({c:"v",n:0},null)},null))}},cons({p:{c:"1",n:2865,p:{c:"v"}},b:{c:"c",v:"New/"}},cons({p:{c:"1",n:2866,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Propose/"},cons({c:"a",f:{c:"n",n:2850},x:{c:"v",n:0}},null))}},cons({p:{c:"1",n:2867,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Vote/"},cons({c:"f",f:ub,a:cons({c:"v",n:0},null)},null))}},null)))))}}'};
function _n2937(t,i){var x=t[i++];var r=x=="Vote"?{n:2854,v:uul(function(){return t[i++];},function(){return parseInt(t[i++])})}:x=="Propose"?{n:2853,v:{_MissionSize:parseInt(t[i++]),_NumPlayers:parseInt(t[i++])}}:x=="New"?{n:2852,v:(t[i++]=="Some"?{v:uul(function(){return t[i++];},function(){return parseInt(t[i++])})}:null)}:x=="Mission"?{n:2851,v:(i++,null)}:x=="Done"?{n:2850,v:(i++,null)}:pf("/Users/ziv/Dev/UrLib/UrLib/prelude.ur:64:24-64:59");return {_1:i,_2:r}}

urfuncs[2835] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:rv,a:cons({c:"v",n:2},cons({c:"c",v:function(s){var t=s.split("/");var i=0;return {_Job:parseInt(t[i++]),_Request:(tmp=_n2937(t,i),i=tmp._1,tmp._2)}}},cons({c:"K"},null)))},e2:{c:"=",e1:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"r",l:cons({n:"Job",p:{c:"v"}},cons({n:"Request",p:{c:"v"}},null))},b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"1",n:2850,p:{c:"v"}},b:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:7},f:"Source"},cons({c:"1",n:2911,v:{c:"r",l:cons({n:"Request",v:{c:"v",n:0}},cons({n:"Submit",v:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:9},f:"Source"},cons({c:"c",v:null},null))},e2:{c:"f",f:rc,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"c",v:"Game/handle/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Group"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Key"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Member"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:5},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"a",f:{c:"n",n:2855},x:{c:"1",n:2863,v:{c:"v",n:2}}},null))},null))},null))},null))},null))},null))},null))},null))},null))},cons({c:"c",v:function(s){var t=s.split("/");var i=0;return (i++,null)}},cons({c:"K"},cons({c:"c",v:false},null)))))}}}}},null))}},null))}},cons({p:{c:"1",n:2851,p:{c:"v"}},b:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:7},f:"Source"},cons({c:"1",n:2912,v:{c:"r",l:cons({n:"Request",v:{c:"v",n:0}},cons({n:"Submit",v:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:9},f:"Source"},cons({c:"c",v:null},null))},e2:{c:"f",f:rc,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"c",v:"Game/handle/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Group"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Key"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Member"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:5},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"a",f:{c:"n",n:2855},x:{c:"1",n:2864,v:{c:"v",n:2}}},null))},null))},null))},null))},null))},null))},null))},null))},null))},cons({c:"c",v:function(s){var t=s.split("/");var i=0;return (i++,null)}},cons({c:"K"},cons({c:"c",v:false},null)))))}}}}},null))}},null))}},cons({p:{c:"1",n:2852,p:{c:"v"}},b:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:7},f:"Source"},cons({c:"1",n:2913,v:{c:"r",l:cons({n:"Request",v:{c:"v",n:0}},cons({n:"Submit",v:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:9},f:"Source"},cons({c:"c",v:null},null))},e2:{c:"f",f:rc,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"c",v:"Game/handle/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Group"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Key"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Member"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:5},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"a",f:{c:"n",n:2855},x:{c:"1",n:2865,v:{c:"v",n:2}}},null))},null))},null))},null))},null))},null))},null))},null))},null))},cons({c:"c",v:function(s){var t=s.split("/");var i=0;return (i++,null)}},cons({c:"K"},cons({c:"c",v:false},null)))))}}}}},null))}},null))}},cons({p:{c:"1",n:2853,p:{c:"v"}},b:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:7},f:"Source"},cons({c:"1",n:2914,v:{c:"r",l:cons({n:"Request",v:{c:"v",n:0}},cons({n:"Submit",v:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:9},f:"Source"},cons({c:"c",v:null},null))},e2:{c:"f",f:rc,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"c",v:"Game/handle/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Group"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Key"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Member"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:5},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"a",f:{c:"n",n:2855},x:{c:"1",n:2866,v:{c:"v",n:2}}},null))},null))},null))},null))},null))},null))},null))},null))},null))},cons({c:"c",v:function(s){var t=s.split("/");var i=0;return (i++,null)}},cons({c:"K"},cons({c:"c",v:false},null)))))}}}}},null))}},null))}},cons({p:{c:"1",n:2854,p:{c:"v"}},b:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:7},f:"Source"},cons({c:"1",n:2915,v:{c:"r",l:cons({n:"Request",v:{c:"v",n:0}},cons({n:"Submit",v:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:9},f:"Source"},cons({c:"c",v:null},null))},e2:{c:"f",f:rc,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"c",v:"Game/handle/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Group"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Key"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:".",r:{c:"v",n:10},f:"Member"},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:5},null)},cons({c:"f",f:cat,a:cons({c:"c",v:"/"},cons({c:"a",f:{c:"n",n:2855},x:{c:"1",n:2867,v:{c:"v",n:2}}},null))},null))},null))},null))},null))},null))},null))},null))},null))},cons({c:"c",v:function(s){var t=s.split("/");var i=0;return (i++,null)}},cons({c:"K"},cons({c:"c",v:false},null)))))}}}}},null))}},null))}},null)))))}},null)},e2:{c:"a",f:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2835},x:{c:"v",n:5}},x:{c:"v",n:4}},x:{c:"c",v:null}},x:{c:"c",v:null}}}}}}}}'};
function _n2939(t,i){var x=t[i++];var r=x=="Spy"?2402:x=="Resistance"?2401:pf("/Users/ziv/Dev/UrLib/UrLib/prelude.ur:64:24-64:59");return {_1:i,_2:r}}

function _n2938(t,i){var x=t[i++];var r=x=="Victory"?{n:2430,v:{_Roles:uul(function(){return t[i++];},function(){return (tmp=_n2939(t,i),i=tmp._1,tmp._2)}),_Winner:(tmp=_n2939(t,i),i=tmp._1,tmp._2)}}:x=="Actions"?{n:2429,v:{_Fails:parseInt(t[i++]),_Successes:parseInt(t[i++])}}:x=="Acting"?{n:2428,v:uul(function(){return t[i++];},function(){return parseInt(t[i++])})}:x=="Votes"?{n:2427,v:uul(function(){return t[i++];},function(){return {_Member:parseInt(t[i++]),_Response:t[i++] == "1"}})}:x=="Voting"?{n:2426,v:uul(function(){return t[i++];},function(){return parseInt(t[i++])})}:x=="Proposing"?{n:2425,v:parseInt(t[i++])}:pf("/Users/ziv/Dev/UrLib/UrLib/prelude.ur:64:24-64:59");return {_1:i,_2:r}}

urfuncs[2244] = {c:"t",f:'{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"c",v:"]"}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"f",f:cat,a:cons({c:"c",v:", "},cons({c:"f",f:cat,a:cons({c:"v",n:1},cons({c:"a",f:{c:"n",n:2244},x:{c:"v",n:0}},null))},null))}},null))}}'};
urfuncs[2243] = {c:"t",f:'{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"c",v:"[]"}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"f",f:cat,a:cons({c:"c",v:"["},cons({c:"f",f:cat,a:cons({c:"v",n:1},cons({c:"a",f:{c:"n",n:2244},x:{c:"v",n:0}},null))},null))}},null))}}'};
urfuncs[2804] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"v",n:1}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"n",n:2804},x:{c:"r",l:cons({n:"1",v:{c:"v",n:1}},cons({n:"2",v:{c:"v",n:3}},null))}},x:{c:"v",n:0}}},null))}}}'};
urfuncs[2836] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"a",f:{c:"a",f:{c:"n",n:2804},x:{c:"c",v:null}},x:{c:"v",n:1}}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"n",n:2836},x:{c:"r",l:cons({n:"1",v:{c:"f",f:ts,a:cons({c:"v",n:1},null)}},cons({n:"2",v:{c:"v",n:3}},null))}},x:{c:"v",n:0}}},null))}}}'};
urfuncs[2769] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"v",n:1}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"n",n:2769},x:{c:"r",l:cons({n:"1",v:{c:"v",n:1}},cons({n:"2",v:{c:"v",n:3}},null))}},x:{c:"v",n:0}}},null))}}}'};
urfuncs[2818] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"a",f:{c:"a",f:{c:"n",n:2769},x:{c:"c",v:null}},x:{c:"v",n:1}}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2818},x:{c:"f",f:plus,a:cons({c:"v",n:4},cons({c:"c",v:1},null))}},x:{c:"m",e:{c:"m",e:{c:"v",n:1},p:cons({p:{c:"c",v:2401},b:{c:"c",v:null}},cons({p:{c:"c",v:2402},b:{c:"v",n:4}},null))},p:cons({p:{c:"c",v:null},b:{c:"v",n:3}},cons({p:{c:"s",n:false,p:{c:"v"}},b:{c:"r",l:cons({n:"1",v:{c:"v",n:0}},cons({n:"2",v:{c:"v",n:4}},null))}},null))}},x:{c:"v",n:0}}},null))}}}}'};
urfuncs[2837] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"a",f:{c:"a",f:{c:"n",n:2804},x:{c:"c",v:null}},x:{c:"v",n:1}}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"n",n:2837},x:{c:"r",l:cons({n:"1",v:{c:"m",e:{c:"v",n:1},p:cons({p:{c:"r",l:cons({n:"Member",p:{c:"v"}},cons({n:"Response",p:{c:"v"}},null))},b:{c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:1},null)},cons({c:"f",f:cat,a:cons({c:"c",v:": "},cons({c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:true},b:{c:"c",v:"approve"}},cons({p:{c:"c",v:false},b:{c:"c",v:"reject"}},null))},null))},null))}},null)}},cons({n:"2",v:{c:"v",n:3}},null))}},x:{c:"v",n:0}}},null))}}}'};
urfuncs[2838] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:rv,a:cons({c:"v",n:2},cons({c:"c",v:function(s){var t=s.split("/");var i=0;return (tmp=_n2938(t,i),i=tmp._1,tmp._2)}},cons({c:"K"},null)))},e2:{c:"=",e1:{c:"f",f:sg,a:cons({c:".",r:{c:"v",n:4},f:"Tail"},null)},e2:{c:"=",e1:{c:"f",f:sc,a:cons({c:"c",v:null},null)},e2:{c:"=",e1:{c:"f",f:sv,a:cons({c:"v",n:1},cons({c:"r",l:cons({n:"1",v:{c:"m",e:{c:"v",n:2},p:cons({p:{c:"1",n:2425,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Player "},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:0},null)},cons({c:"c",v:" proposing a team."},null))},null))}},cons({p:{c:"1",n:2426,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Voting on team "},cons({c:"f",f:cat,a:cons({c:"a",f:{c:"n",n:2243},x:{c:"a",f:{c:"a",f:{c:"n",n:2836},x:{c:"c",v:null}},x:{c:"v",n:0}}},cons({c:"c",v:"."},null))},null))}},cons({p:{c:"1",n:2427,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Votes are "},cons({c:"f",f:cat,a:cons({c:"a",f:{c:"n",n:2243},x:{c:"a",f:{c:"a",f:{c:"n",n:2837},x:{c:"c",v:null}},x:{c:"v",n:0}}},cons({c:"c",v:"."},null))},null))}},cons({p:{c:"1",n:2428,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"Team "},cons({c:"f",f:cat,a:cons({c:"a",f:{c:"n",n:2243},x:{c:"a",f:{c:"a",f:{c:"n",n:2836},x:{c:"c",v:null}},x:{c:"v",n:0}}},cons({c:"c",v:" going on mission."},null))},null))}},cons({p:{c:"1",n:2429,p:{c:"r",l:cons({n:"Successes",p:{c:"v"}},cons({n:"Fails",p:{c:"v"}},null))}},b:{c:"f",f:cat,a:cons({c:"c",v:"There were "},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:1},null)},cons({c:"f",f:cat,a:cons({c:"c",v:" successes and "},cons({c:"f",f:cat,a:cons({c:"f",f:ts,a:cons({c:"v",n:0},null)},cons({c:"c",v:"fails."},null))},null))},null))},null))}},cons({p:{c:"1",n:2430,p:{c:"r",l:cons({n:"Winner",p:{c:"v"}},cons({n:"Roles",p:{c:"v"}},null))}},b:{c:"f",f:cat,a:cons({c:"m",e:{c:"v",n:1},p:cons({p:{c:"c",v:2401},b:{c:"c",v:"Resistance"}},cons({p:{c:"c",v:2402},b:{c:"c",v:"Spy"}},null))},cons({c:"f",f:cat,a:cons({c:"c",v:" victory! The spies were "},cons({c:"f",f:cat,a:cons({c:"a",f:{c:"n",n:2243},x:{c:"a",f:{c:"a",f:{c:"n",n:2836},x:{c:"c",v:null}},x:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2818},x:{c:"c",v:0}},x:{c:"c",v:null}},x:{c:"v",n:0}}}},cons({c:"c",v:"."},null))},null))},null))}},null))))))}},cons({n:"2",v:{c:"v",n:0}},null))},null))},e2:{c:"=",e1:{c:"f",f:sv,a:cons({c:".",r:{c:"v",n:7},f:"Tail"},cons({c:"v",n:1},null))},e2:{c:"a",f:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2838},x:{c:"v",n:8}},x:{c:"v",n:7}},x:{c:"c",v:null}},x:{c:"c",v:null}}}}}}}}}}}'};
urfuncs[2919] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sp,a:cons({c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2835},x:{c:"v",n:2}},x:{c:".",r:{c:"v",n:2},f:"Channel"}},x:{c:"c",v:null}},null)},e2:{c:"f",f:sp,a:cons({c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2838},x:{c:"v",n:4}},x:{c:"v",n:2}},x:{c:"c",v:null}},null)}}}}}}'};
urfuncs[2929] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:uw_mouseEvent,a:null},e2:{c:"=",e1:{c:"f",f:sv,a:cons({c:"v",n:2},cons({c:"c",v:false},null))},e2:{c:"a",f:{c:"a",f:{c:".",r:{c:"v",n:4},f:"Submit"},x:{c:"c",v:true}},x:{c:"c",v:null}}}}}}}'};
urfuncs[2930] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:uw_mouseEvent,a:null},e2:{c:"=",e1:{c:"f",f:sv,a:cons({c:"v",n:2},cons({c:"c",v:false},null))},e2:{c:"a",f:{c:"a",f:{c:".",r:{c:"v",n:4},f:"Submit"},x:{c:"c",v:false}},x:{c:"c",v:null}}}}}}}'};
urfuncs[2931] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"f",f:sb,a:cons({c:"f",f:ss,a:cons({c:"v",n:1},null)},cons({c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:true},b:{c:"f",f:sr,a:cons({c:"f",f:cat,a:cons({c:"c",v:"\\n\\074button onclick=\'uw_event=event;exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2929},x:{c:"v",n:3}},x:{c:"v",n:2}},x:{c:"c",v:null}}},cons({c:"f",f:cat,a:cons({c:"c",v:")\'>Approve\\074/button>\\n\\n\\074button onclick=\'uw_event=event;exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2930},x:{c:"v",n:3}},x:{c:"v",n:2}},x:{c:"c",v:null}}},cons({c:"c",v:")\'>Reject\\074/button>\\n"},null))},null))},null))},null))},null)}},cons({p:{c:"c",v:false},b:{c:"f",f:sr,a:cons({c:"c",v:""},null)}},null))}},null))}}}}'};
urfuncs[2932] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sc,a:cons({c:"c",v:true},null)},e2:{c:"f",f:cat,a:cons({c:"c",v:"\\074script type=\\"text/javascript\\">dyn(\\"span\\", execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2931},x:{c:"v",n:3}},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>"},null))},null))}}}}}'};
urfuncs[2839] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"m",e:{c:"f",f:le,a:cons({c:"v",n:2},cons({c:"c",v:0},null))},p:cons({p:{c:"c",v:true},b:{c:"v",n:1}},cons({p:{c:"c",v:false},b:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2839},x:{c:"f",f:minus,a:cons({c:"v",n:2},cons({c:"c",v:1},null))}},x:{c:"r",l:cons({n:"1",v:{c:"f",f:sc,a:cons({c:"c",v:0},null)}},cons({n:"2",v:{c:"v",n:1}},null))}},x:{c:"c",v:null}}},null))}}}}'};
urfuncs[2840] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"c",v:""}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"f",f:cat,a:cons({c:"c",v:"\\n \\074script type=\\"text/javascript\\">var d=number(exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"v",n:1}},cons({c:"f",f:cat,a:cons({c:"c",v:"));d.max=exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"n",n:2916},x:{c:"v",n:3}},x:{c:"c",v:null}}},cons({c:"f",f:cat,a:cons({c:"c",v:");d.min=exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"n",n:2917},x:{c:"c",v:null}}},cons({c:"f",f:cat,a:cons({c:"c",v:");d.step=exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"n",n:2918},x:{c:"c",v:null}}},cons({c:"f",f:cat,a:cons({c:"c",v:");\\074/script>\\n"},cons({c:"a",f:{c:"a",f:{c:"n",n:2840},x:{c:"v",n:3}},x:{c:"v",n:0}},null))},null))},null))},null))},null))},null))},null))},null))},null))}},null))}}}'};
urfuncs[2841] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"f",f:sr,a:cons({c:"a",f:{c:"a",f:{c:"n",n:2769},x:{c:"c",v:null}},x:{c:"v",n:1}},null)}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"f",f:sb,a:cons({c:"f",f:sb,a:cons({c:"f",f:ss,a:cons({c:"v",n:1},null)},cons({c:"l",b:{c:"f",f:sr,a:cons({c:"f",f:round,a:cons({c:"v",n:0},null)},null)}},null))},cons({c:"l",b:{c:"a",f:{c:"a",f:{c:"n",n:2841},x:{c:"r",l:cons({n:"1",v:{c:"v",n:0}},cons({n:"2",v:{c:"v",n:4}},null))}},x:{c:"v",n:1}}},null))}},null))}}}'};
urfuncs[2844] = {c:"t",f:'{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}}},null))}},b:{c:"m",e:{c:"f",f:eq,a:cons({c:"v",n:2},cons({c:"v",n:1},null))},p:cons({p:{c:"c",v:true},b:{c:"c",v:false}},cons({p:{c:"c",v:false},b:{c:"a",f:{c:"n",n:2844},x:{c:"r",l:cons({n:"1",v:{c:"v",n:1}},cons({n:"2",v:{c:"v",n:0}},null))}}},null))}},cons({p:{c:"w"},b:{c:"c",v:true}},null))}}'};
urfuncs[2771] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:2},p:cons({p:{c:"c",v:null},b:{c:"r",l:cons({n:"1",v:{c:"a",f:{c:"a",f:{c:"n",n:2769},x:{c:"c",v:null}},x:{c:"v",n:1}}},cons({n:"2",v:{c:"a",f:{c:"a",f:{c:"n",n:2769},x:{c:"c",v:null}},x:{c:"v",n:0}}},null))}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"c",v:null}},null))}},b:{c:"r",l:cons({n:"1",v:{c:"a",f:{c:"a",f:{c:"n",n:2769},x:{c:"c",v:null}},x:{c:"r",l:cons({n:"1",v:{c:"v",n:0}},cons({n:"2",v:{c:"v",n:2}},null))}}},cons({n:"2",v:{c:"a",f:{c:"a",f:{c:"n",n:2769},x:{c:"c",v:null}},x:{c:"v",n:1}}},null))}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}}},null))}},b:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2771},x:{c:"v",n:0}},x:{c:"r",l:cons({n:"1",v:{c:"v",n:2}},cons({n:"2",v:{c:"v",n:4}},null))}},x:{c:"r",l:cons({n:"1",v:{c:"v",n:1}},cons({n:"2",v:{c:"v",n:3}},null))}}},null)))}}}}'};
urfuncs[2773] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:1},p:cons({p:{c:"c",v:null},b:{c:"v",n:0}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"n",n:2773},x:{c:"v",n:0}},x:{c:"r",l:cons({n:"1",v:{c:"v",n:1}},cons({n:"2",v:{c:"v",n:2}},null))}}},null))}}}'};
urfuncs[2843] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"m",e:{c:"r",l:cons({n:"1",v:{c:"v",n:2}},cons({n:"2",v:{c:"v",n:1}},null))},p:cons({p:{c:"r",l:cons({n:"1",p:{c:"c",v:null}},cons({n:"2",p:{c:"w"}},null))},b:{c:"a",f:{c:"a",f:{c:"n",n:2773},x:{c:"v",n:0}},x:{c:"v",n:1}}},cons({p:{c:"r",l:cons({n:"1",p:{c:"w"}},cons({n:"2",p:{c:"c",v:null}},null))},b:{c:"a",f:{c:"a",f:{c:"n",n:2773},x:{c:"v",n:0}},x:{c:"v",n:2}}},cons({p:{c:"r",l:cons({n:"1",p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}}},cons({n:"2",p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}}},null))},b:{c:"m",e:{c:"f",f:le,a:cons({c:"v",n:3},cons({c:"v",n:1},null))},p:cons({p:{c:"c",v:true},b:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2843},x:{c:"v",n:6}},x:{c:"v",n:0}},x:{c:"r",l:cons({n:"1",v:{c:"v",n:1}},cons({n:"2",v:{c:"v",n:4}},null))}}},cons({p:{c:"c",v:false},b:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2843},x:{c:"v",n:2}},x:{c:"v",n:5}},x:{c:"r",l:cons({n:"1",v:{c:"v",n:3}},cons({n:"2",v:{c:"v",n:4}},null))}}},null))}},null)))}}}}'};
urfuncs[2842] = {c:"t",f:'{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"v",n:0}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"w"}},cons({n:"2",p:{c:"c",v:null}},null))}},b:{c:"v",n:0}},cons({p:{c:"w"},b:{c:"m",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2771},x:{c:"v",n:0}},x:{c:"c",v:null}},x:{c:"c",v:null}},p:cons({p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))},b:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2843},x:{c:"a",f:{c:"n",n:2842},x:{c:"v",n:1}}},x:{c:"a",f:{c:"n",n:2842},x:{c:"v",n:0}}},x:{c:"c",v:null}}},null)}},null)))}}'};
urfuncs[2845] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"v",n:1}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"n",n:2845},x:{c:"m",e:{c:"f",f:lt,a:cons({c:"v",n:1},cons({c:"v",n:3},null))},p:cons({p:{c:"c",v:true},b:{c:"v",n:1}},cons({p:{c:"c",v:false},b:{c:"v",n:3}},null))}},x:{c:"v",n:0}}},null))}}}'};
urfuncs[2846] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"v",n:1}},cons({p:{c:"s",n:false,p:{c:"r",l:cons({n:"1",p:{c:"v"}},cons({n:"2",p:{c:"v"}},null))}},b:{c:"a",f:{c:"a",f:{c:"n",n:2846},x:{c:"m",e:{c:"f",f:not,a:cons({c:"f",f:le,a:cons({c:"v",n:1},cons({c:"v",n:3},null))},null)},p:cons({p:{c:"c",v:true},b:{c:"v",n:1}},cons({p:{c:"c",v:false},b:{c:"v",n:3}},null))}},x:{c:"v",n:0}}},null))}}}'};
urfuncs[2924] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:uw_mouseEvent,a:null},e2:{c:"=",e1:{c:"f",f:sv,a:cons({c:"v",n:2},cons({c:"c",v:false},null))},e2:{c:"a",f:{c:"a",f:{c:".",r:{c:"v",n:5},f:"Submit"},x:{c:"v",n:4}},x:{c:"c",v:null}}}}}}}}'};
urfuncs[2925] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"l",b:{c:"f",f:sb,a:cons({c:"f",f:ss,a:cons({c:"v",n:1},null)},cons({c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:true},b:{c:"f",f:sr,a:cons({c:"f",f:cat,a:cons({c:"c",v:"\\n\\074button onclick=\'uw_event=event;exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2924},x:{c:"v",n:4}},x:{c:"v",n:3}},x:{c:"v",n:2}},x:{c:"c",v:null}}},cons({c:"c",v:")\'>Propose\\074/button>\\n"},null))},null))},null)}},cons({p:{c:"c",v:false},b:{c:"f",f:sr,a:cons({c:"c",v:""},null)}},null))}},null))}}}}}'};
urfuncs[2926] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sc,a:cons({c:"c",v:true},null)},e2:{c:"f",f:cat,a:cons({c:"c",v:"\\074script type=\\"text/javascript\\">dyn(\\"span\\", execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2925},x:{c:"v",n:4}},x:{c:"v",n:3}},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>"},null))},null))}}}}}}'};
urfuncs[2927] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"a",f:{c:"a",f:{c:"n",n:2841},x:{c:"c",v:null}},x:{c:"v",n:1}},e2:{c:"f",f:sb,a:cons({c:"v",n:0},cons({c:"l",b:{c:"m",e:{c:"m",e:{c:"m",e:{c:"a",f:{c:"n",n:2844},x:{c:"a",f:{c:"n",n:2842},x:{c:"v",n:0}}},p:cons({p:{c:"c",v:true},b:{c:"f",f:not,a:cons({c:"f",f:lt,a:cons({c:"a",f:{c:"a",f:{c:"n",n:2845},x:{c:".",r:{c:".",r:{c:"v",n:4},f:"Request"},f:"NumPlayers"}},x:{c:"v",n:0}},cons({c:"c",v:0},null))},null)}},cons({p:{c:"c",v:false},b:{c:"c",v:false}},null))},p:cons({p:{c:"c",v:true},b:{c:"f",f:lt,a:cons({c:"a",f:{c:"a",f:{c:"n",n:2846},x:{c:"c",v:0}},x:{c:"v",n:0}},cons({c:".",r:{c:".",r:{c:"v",n:4},f:"Request"},f:"NumPlayers"},null))}},cons({p:{c:"c",v:false},b:{c:"c",v:false}},null))},p:cons({p:{c:"c",v:true},b:{c:"f",f:sr,a:cons({c:"f",f:cat,a:cons({c:"c",v:"\\074script type=\\"text/javascript\\">active(execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2926},x:{c:"v",n:4}},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>"},null))},null))},null)}},cons({p:{c:"c",v:false},b:{c:"f",f:sr,a:cons({c:"c",v:""},null)}},null))}},null))}}}}}'};
urfuncs[2928] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2839},x:{c:".",r:{c:".",r:{c:"v",n:2},f:"Request"},f:"MissionSize"}},x:{c:"c",v:null}},x:{c:"c",v:null}},e2:{c:"f",f:cat,a:cons({c:"c",v:"\\n"},cons({c:"f",f:cat,a:cons({c:"a",f:{c:"a",f:{c:"n",n:2840},x:{c:".",r:{c:".",r:{c:"v",n:3},f:"Request"},f:"NumPlayers"}},x:{c:"v",n:0}},cons({c:"f",f:cat,a:cons({c:"c",v:"\\n\\074script type=\\"text/javascript\\">dyn(\\"span\\", execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2927},x:{c:"v",n:3}},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>\\n"},null))},null))},null))},null))}}}}}'};
urfuncs[2920] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:uw_mouseEvent,a:null},e2:{c:"=",e1:{c:"f",f:sv,a:cons({c:"v",n:2},cons({c:"c",v:false},null))},e2:{c:"a",f:{c:"a",f:{c:".",r:{c:"v",n:4},f:"Submit"},x:{c:"c",v:true}},x:{c:"c",v:null}}}}}}}'};
urfuncs[2921] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:uw_mouseEvent,a:null},e2:{c:"=",e1:{c:"f",f:sv,a:cons({c:"v",n:2},cons({c:"c",v:false},null))},e2:{c:"a",f:{c:"a",f:{c:".",r:{c:"v",n:4},f:"Submit"},x:{c:"c",v:false}},x:{c:"c",v:null}}}}}}}'};
urfuncs[2922] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"f",f:sb,a:cons({c:"f",f:ss,a:cons({c:"v",n:1},null)},cons({c:"l",b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:true},b:{c:"f",f:sr,a:cons({c:"f",f:cat,a:cons({c:"c",v:"\\n\\074button onclick=\'uw_event=event;exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2920},x:{c:"v",n:3}},x:{c:"v",n:2}},x:{c:"c",v:null}}},cons({c:"f",f:cat,a:cons({c:"c",v:")\'>Success\\074/button>\\n\\n\\074button onclick=\'uw_event=event;exec("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2921},x:{c:"v",n:3}},x:{c:"v",n:2}},x:{c:"c",v:null}}},cons({c:"c",v:")\'>Fail\\074/button>\\n"},null))},null))},null))},null))},null)}},cons({p:{c:"c",v:false},b:{c:"f",f:sr,a:cons({c:"c",v:""},null)}},null))}},null))}}}}'};
urfuncs[2923] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"l",b:{c:"=",e1:{c:"f",f:sc,a:cons({c:"c",v:true},null)},e2:{c:"f",f:cat,a:cons({c:"c",v:"\\074script type=\\"text/javascript\\">dyn(\\"span\\", execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"a",f:{c:"n",n:2922},x:{c:"v",n:3}},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>"},null))},null))}}}}}'};
urfuncs[2933] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"f",f:sb,a:cons({c:"f",f:ss,a:cons({c:".",r:{c:"v",n:1},f:"Source"},null)},cons({c:"l",b:{c:"f",f:sr,a:cons({c:"m",e:{c:"v",n:0},p:cons({p:{c:"c",v:null},b:{c:"c",v:"Waiting...."}},cons({p:{c:"s",n:false,p:{c:"v"}},b:{c:"m",e:{c:"v",n:0},p:cons({p:{c:"1",n:2911,p:{c:"v"}},b:{c:"c",v:"Game over."}},cons({p:{c:"1",n:2912,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"\\nYou\'re going on the mission.\\074br />\\n\\074script type=\\"text/javascript\\">active(execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"n",n:2923},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>\\n"},null))},null))}},cons({p:{c:"1",n:2913,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"\\n"},cons({c:"f",f:cat,a:cons({c:"f",f:eh,a:cons({c:"m",e:{c:".",r:{c:"v",n:0},f:"Request"},p:cons({p:{c:"c",v:null},b:{c:"c",v:"You\'re a loyal Resistance member."}},cons({p:{c:"s",n:true,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"You\'re a Spy. The spies are "},cons({c:"f",f:cat,a:cons({c:"a",f:{c:"n",n:2243},x:{c:"a",f:{c:"a",f:{c:"n",n:2836},x:{c:"c",v:null}},x:{c:"v",n:0}}},cons({c:"c",v:"."},null))},null))}},null))},null)},cons({c:"c",v:"\\n"},null))},null))}},cons({p:{c:"1",n:2914,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"\\n\\074script type=\\"text/javascript\\">active(execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"n",n:2928},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>\\n"},null))},null))}},cons({p:{c:"1",n:2915,p:{c:"v"}},b:{c:"f",f:cat,a:cons({c:"c",v:"\\nProposed team is "},cons({c:"f",f:cat,a:cons({c:"f",f:eh,a:cons({c:"a",f:{c:"n",n:2243},x:{c:"a",f:{c:"a",f:{c:"n",n:2836},x:{c:"c",v:null}},x:{c:".",r:{c:"v",n:0},f:"Request"}}},null)},cons({c:"f",f:cat,a:cons({c:"c",v:".\\074br />\\n\\074script type=\\"text/javascript\\">active(execD("},cons({c:"f",f:cat,a:cons({c:"e",e:{c:"a",f:{c:"a",f:{c:"n",n:2932},x:{c:"v",n:0}},x:{c:"c",v:null}}},cons({c:"c",v:"))\\074/script>\\n"},null))},null))},null))},null))}},null)))))}},null))},null)}},null))}}}'};
urfuncs[2934] = {c:"t",f:'{c:"l",b:{c:"l",b:{c:"a",f:{c:"n",n:2268},x:{c:".",r:{c:"v",n:1},f:"Head"}}}}'};

time_format = "%c";
)

 val
  initializer as initializer : {} -> {} =
   (fn _ : {} =>
     (dml("DELETE FROM uw_Game_users");
      (dml("DELETE FROM uw_Game_games"); {})))

 val
  expunger as expunger : FFI(Basis.client) -> {} =
   (fn cli : FFI(Basis.client) =>
     (dml("DELETE FROM uw_Game_users WHERE ((uw_Channel >> 32) = " ^
           FFI(Basis.sqlifyClient(cli)) ^ ")");
      (dml("DELETE FROM uw_Game_games WHERE ((uw_Channel >> 32) = " ^
            FFI(Basis.sqlifyClient(cli)) ^ ")"); {})))
 database host=localhost dbname=ziv (expunger, initializer)
 datatype role = Resistance | Spy

 val rec
  $foldl'_unpoly_unpoly as List/foldl' :
   FFI(Basis.int) ->
    list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) ->
     FFI(Basis.int) =
   (fn acc : FFI(Basis.int) =>
     (fn ls :
       list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $foldl'_unpoly_unpoly
            ((case
               (case x.Response of
                 FFIC(Basis.True) => FFIC(Basis.False) |
                  FFIC(Basis.False) => FFIC(Basis.True)) of
               FFIC(Basis.True) => 1 | FFIC(Basis.False) => 0) + acc)
            ls)))
 (* SQL sequence uw_Game_groups*)

 datatype
  message =
   Proposing of FFI(Basis.int) | Voting of list(FFI(Basis.int)) |
    Votes of
     list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) |
    Acting of list(FFI(Basis.int)) |
    Actions of {Fails : FFI(Basis.int), Successes : FFI(Basis.int)} |
    Victory of {Roles : list(role), Winner : role}

 (* SQL table uw_Game_games :
  Group : FFI(Basis.int), NumPlayers : FFI(Basis.int),
   Started : FFI(Basis.bool), Channel : FFI(Basis.channel) keys
  "uw_group" constraints {} *)

 val
  urlify_role as  : role -> FFI(Basis.string) =
   (fn x : role =>
     (case x of Resistance => "Resistance" | Spy => "Spy"))

 val rec
  urlify_list as  : list(role) -> FFI(Basis.string) =
   (fn x : list(role) =>
     (case x of
       None => "Nil" |
        Some a =>
         "Cons/" ^
          (case a.1 of Resistance => "Resistance" | Spy => "Spy") ^
           "/" ^ urlify_list a.2))

 val rec
  urlify_list as  :
   list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) ->
    FFI(Basis.string) =
   (fn x :
     list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) =>
     (case x of
       None => "Nil" |
        Some a =>
         "Cons/" ^
          FFI(Basis.urlifyInt(a.1.Member)) ^
           "/" ^
            FFI(Basis.urlifyBool(a.1.Response)) ^
             "/" ^ urlify_list a.2))

 val rec
  urlify_list as  : list(FFI(Basis.int)) -> FFI(Basis.string) =
   (fn x : list(FFI(Basis.int)) =>
     (case x of
       None => "Nil" |
        Some a =>
         "Cons/" ^ FFI(Basis.urlifyInt(a.1)) ^ "/" ^ urlify_list a.2))

 val
  broadcast as Game/broadcast : FFI(Basis.int) -> message -> {} -> {}
   =
   (fn group : FFI(Basis.int) =>
     (fn message : message =>
       (fn _ : {} =>
         (let $x : {Channel : FFI(Basis.channel)} =
          ((case
             query[] [T : {Channel : FFI(Basis.channel)}] [option({T
                                                                    :
                                                                    {Channel
                                                                      :
                                                                      FFI(Basis.channel)}})]
              "SELECT T_T.uw_Channel FROM uw_Game_games AS T_T WHERE ((T_T.uw_group = "
               ^
               FFI(Basis.sqlifyInt(group)) ^
                ") AND TRUE) GROUP BY T_T.uw_Channel" initial None in
              Some r of
             None =>
              (error "Query returned no rows" :
               {Channel : FFI(Basis.channel)}) | Some r => r.T)) in
          ((case $x of
             {Channel = chan} =>
              FFI(Basis.send(chan,
                              (case message of
                                Proposing a =>
                                 "Proposing/" ^
                                  FFI(Basis.urlifyInt(a)) |
                                 Voting a =>
                                  "Voting/" ^ urlify_list a |
                                 Votes a => "Votes/" ^ urlify_list a
                                                                     |

                                 Acting a =>
                                  "Acting/" ^ urlify_list a |
                                 Actions a =>
                                  "Actions/" ^
                                   FFI(Basis.urlifyInt(a.Fails)) ^
                                    "/" ^
                                     FFI(Basis.urlifyInt(a.Successes))
                                                                       |

                                 Victory a =>
                                  "Victory/" ^
                                   (urlify_list a.Roles) ^
                                    "/" ^
                                     (case a.Winner of
                                       Resistance => "Resistance" |
                                        Spy => "Spy"))))))))))

 val rec
  $rev'_unpoly as List/rev' :
   list(FFI(Basis.int)) ->
    list(FFI(Basis.int)) -> list(FFI(Basis.int)) =
   (fn acc : list(FFI(Basis.int)) =>
     (fn ls : list(FFI(Basis.int)) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $rev'_unpoly (Some {1 = x, 2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as Prelude/mp' :
   FFI(Basis.int) ->
    list(FFI(Basis.int)) -> list(role) -> list(FFI(Basis.int)) =
   (fn n : FFI(Basis.int) =>
     (fn acc : list(FFI(Basis.int)) =>
       (fn ls : list(role) =>
         (case ls of
           None => $rev'_unpoly None acc |
            Some {1 = x, 2 = ls} =>
             $mp'_unpoly_unpoly (n + 1)
              (case (case x of Resistance => None | Spy => Some n) of
                None => acc | Some y => Some {1 = y, 2 = acc}) ls))))

 (* SQL table uw_Game_Sm_sms :
  Label : FFI(Basis.int), State : FFI(Basis.string) keys ""
  constraints {} *)
 (* SQL sequence uw_Game_jobs*)

 (* SQL table uw_Game_users :
  Group : FFI(Basis.int), Member : FFI(Basis.int),
   Channel : FFI(Basis.channel), Key : FFI(Basis.int),
   Instance : option(FFI(Basis.string)),
   Response : option(FFI(Basis.string)) keys "uw_group, uw_member"
  constraints {} *)

 val rec
  $split_unpoly as List/split :
   list(FFI(Basis.int)) ->
    list(FFI(Basis.int)) ->
     list(FFI(Basis.int)) ->
      {1 : list(FFI(Basis.int)), 2 : list(FFI(Basis.int))} =
   (fn ls : list(FFI(Basis.int)) =>
     (fn acc1 : list(FFI(Basis.int)) =>
       (fn acc2 : list(FFI(Basis.int)) =>
         (case ls of
           None =>
            {1 = $rev'_unpoly None acc1, 2 = $rev'_unpoly None acc2}
                                                                     |

            Some {1 = x, 2 = None} =>
             {1 = $rev'_unpoly None (Some {1 = x, 2 = acc1}),
               2 = $rev'_unpoly None acc2} |
            Some {1 = x1, 2 = Some {1 = x2, 2 = ls'}} =>
             $split_unpoly ls' (Some {1 = x1, 2 = acc1})
              (Some {1 = x2, 2 = acc2})))))

 val rec
  $ra_unpoly as List/ra :
   list(FFI(Basis.int)) ->
    list(FFI(Basis.int)) -> list(FFI(Basis.int)) =
   (fn ls : list(FFI(Basis.int)) =>
     (fn acc : list(FFI(Basis.int)) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $ra_unpoly ls (Some {1 = x, 2 = acc}))))

 val rec
  $rev'_unpoly as List/rev' :
   list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))}) ->
    list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
     ->
     list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
   =
   (fn acc :
     list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
     =>
     (fn ls :
       list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
       =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $rev'_unpoly (Some {1 = x, 2 = acc}) ls)))

 val rec
  $rev'_unpoly as List/rev' :
   list({Member : FFI(Basis.int), Request : {}}) ->
    list({Member : FFI(Basis.int), Request : {}}) ->
     list({Member : FFI(Basis.int), Request : {}}) =
   (fn acc : list({Member : FFI(Basis.int), Request : {}}) =>
     (fn ls : list({Member : FFI(Basis.int), Request : {}}) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $rev'_unpoly (Some {1 = x, 2 = acc}) ls)))

 val rec
  $nth_unpoly as List/nth :
   list(role) -> FFI(Basis.int) -> option(role) =
   (fn ls : list(role) =>
     (fn n : FFI(Basis.int) =>
       (case ls of
         None => None |
          Some {1 = x, 2 = ls'} =>
           (case (n <= 0) of
             FFIC(Basis.True) => Some x |
              FFIC(Basis.False) => $nth_unpoly ls' (n - 1)))))

 val rec
  $nth_unpoly as List/nth :
   list(FFI(Basis.int)) -> FFI(Basis.int) -> option(FFI(Basis.int)) =
   (fn ls : list(FFI(Basis.int)) =>
     (fn n : FFI(Basis.int) =>
       (case ls of
         None => None |
          Some {1 = x, 2 = ls'} =>
           (case (n <= 0) of
             FFIC(Basis.True) => Some x |
              FFIC(Basis.False) => $nth_unpoly ls' (n - 1)))))

 val rec
  $rev'_unpoly as List/rev' :
   list({Member : FFI(Basis.int),
          Request : option(list(FFI(Basis.int)))}) ->
    list({Member : FFI(Basis.int),
           Request : option(list(FFI(Basis.int)))}) ->
     list({Member : FFI(Basis.int),
            Request : option(list(FFI(Basis.int)))}) =
   (fn acc :
     list({Member : FFI(Basis.int),
            Request : option(list(FFI(Basis.int)))}) =>
     (fn ls :
       list({Member : FFI(Basis.int),
              Request : option(list(FFI(Basis.int)))}) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $rev'_unpoly (Some {1 = x, 2 = acc}) ls)))

 datatype
  $poly2849 =
   Done of {} | Mission of {} | New of option(list(FFI(Basis.int))) |
    Propose of
     {MissionSize : FFI(Basis.int), NumPlayers : FFI(Basis.int)} |
    Vote of list(FFI(Basis.int))

 val rec
  $rev'_unpoly as List/rev' :
   list({Member : FFI(Basis.int), Request : $poly2849}) ->
    list({Member : FFI(Basis.int), Request : $poly2849}) ->
     list({Member : FFI(Basis.int), Request : $poly2849}) =
   (fn acc : list({Member : FFI(Basis.int), Request : $poly2849}) =>
     (fn ls : list({Member : FFI(Basis.int), Request : $poly2849}) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $rev'_unpoly (Some {1 = x, 2 = acc}) ls)))

 val rec
  $rev'_unpoly as List/rev' :
   list({Member : FFI(Basis.int)}) ->
    list({Member : FFI(Basis.int)}) ->
     list({Member : FFI(Basis.int)}) =
   (fn acc : list({Member : FFI(Basis.int)}) =>
     (fn ls : list({Member : FFI(Basis.int)}) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $rev'_unpoly (Some {1 = x, 2 = acc}) ls)))

 val rec
  $find'_unpoly as List/find' :
   FFI(Basis.int) ->
    list({Member : FFI(Basis.int), Request : $poly2849}) ->
     option({Member : FFI(Basis.int), Request : $poly2849}) =
   (fn member : FFI(Basis.int) =>
     (fn ls : list({Member : FFI(Basis.int), Request : $poly2849}) =>
       (case ls of
         None => None |
          Some {1 = x, 2 = ls} =>
           (case (x.Member == member) of
             FFIC(Basis.True) => Some x |
              FFIC(Basis.False) => $find'_unpoly member ls))))

 val rec
  $foldl'_unpoly_unpoly as List/foldl' :
   FFI(Basis.string) ->
    list({Member : FFI(Basis.int)}) -> FFI(Basis.string) =
   (fn acc : FFI(Basis.string) =>
     (fn ls : list({Member : FFI(Basis.int)}) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $foldl'_unpoly_unpoly
            ("(" ^
              acc ^
               " AND ((T_T.uw_member = " ^
                FFI(Basis.sqlifyInt(x.Member)) ^ ") AND TRUE))") ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   list({Member : FFI(Basis.int)}) ->
    list(FFI(Basis.int)) -> list({Member : FFI(Basis.int)}) =
   (fn acc : list({Member : FFI(Basis.int)}) =>
     (fn ls : list(FFI(Basis.int)) =>
       (case ls of
         None => $rev'_unpoly None acc |
          Some {1 = x, 2 = ls} =>
           $mp'_unpoly_unpoly (Some {1 = {Member = x}, 2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   list(FFI(Basis.int)) ->
    list({Member : FFI(Basis.int), Request : $poly2849}) ->
     list(FFI(Basis.int)) =
   (fn acc : list(FFI(Basis.int)) =>
     (fn ls : list({Member : FFI(Basis.int), Request : $poly2849}) =>
       (case ls of
         None => $rev'_unpoly None acc |
          Some {1 = x, 2 = ls} =>
           $mp'_unpoly_unpoly (Some {1 = x.Member, 2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   list({Member : FFI(Basis.int), Request : $poly2849}) ->
    list({Member : FFI(Basis.int),
           Request : option(list(FFI(Basis.int)))}) ->
     list({Member : FFI(Basis.int), Request : $poly2849}) =
   (fn acc : list({Member : FFI(Basis.int), Request : $poly2849}) =>
     (fn ls :
       list({Member : FFI(Basis.int),
              Request : option(list(FFI(Basis.int)))}) =>
       (case ls of
         None => $rev'_unpoly None acc |
          Some {1 = x, 2 = ls} =>
           $mp'_unpoly_unpoly
            (Some
              {1 = {Member = x.Member, Request = New x.Request},
                2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   list({Member : FFI(Basis.int), Request : $poly2849}) ->
    list({Member : FFI(Basis.int),
           Request :
            {MissionSize : FFI(Basis.int),
              NumPlayers : FFI(Basis.int)}}) ->
     list({Member : FFI(Basis.int), Request : $poly2849}) =
   (fn acc : list({Member : FFI(Basis.int), Request : $poly2849}) =>
     (fn ls :
       list({Member : FFI(Basis.int),
              Request :
               {MissionSize : FFI(Basis.int),
                 NumPlayers : FFI(Basis.int)}}) =>
       (case ls of
         None => $rev'_unpoly None acc |
          Some {1 = x, 2 = ls} =>
           $mp'_unpoly_unpoly
            (Some
              {1 = {Member = x.Member, Request = Propose x.Request},
                2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   list({Member : FFI(Basis.int), Request : $poly2849}) ->
    list({Member : FFI(Basis.int), Request : {}}) ->
     list({Member : FFI(Basis.int), Request : $poly2849}) =
   (fn acc : list({Member : FFI(Basis.int), Request : $poly2849}) =>
     (fn ls : list({Member : FFI(Basis.int), Request : {}}) =>
       (case ls of
         None => $rev'_unpoly None acc |
          Some {1 = x, 2 = ls} =>
           $mp'_unpoly_unpoly
            (Some
              {1 = {Member = x.Member, Request = Mission x.Request},
                2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   list({Member : FFI(Basis.int), Request : $poly2849}) ->
    list({Member : FFI(Basis.int), Request : {}}) ->
     list({Member : FFI(Basis.int), Request : $poly2849}) =
   (fn acc : list({Member : FFI(Basis.int), Request : $poly2849}) =>
     (fn ls : list({Member : FFI(Basis.int), Request : {}}) =>
       (case ls of
         None => $rev'_unpoly None acc |
          Some {1 = x, 2 = ls} =>
           $mp'_unpoly_unpoly
            (Some
              {1 = {Member = x.Member, Request = Done x.Request},
                2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   list({Member : FFI(Basis.int), Request : $poly2849}) ->
    list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
     -> list({Member : FFI(Basis.int), Request : $poly2849}) =
   (fn acc : list({Member : FFI(Basis.int), Request : $poly2849}) =>
     (fn ls :
       list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
       =>
       (case ls of
         None => $rev'_unpoly None acc |
          Some {1 = x, 2 = ls} =>
           $mp'_unpoly_unpoly
            (Some
              {1 = {Member = x.Member, Request = Vote x.Request},
                2 = acc}) ls)))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
     NumPlayers : FFI(Basis.int), Roles : list(role),
     Round : FFI(Basis.int), Score : FFI(Basis.int)} ->
    FFI(Basis.int) ->
     list({Member : FFI(Basis.int),
            Request : option(list(FFI(Basis.int)))}) ->
      list(role) ->
       list({Member : FFI(Basis.int),
              Request : option(list(FFI(Basis.int)))}) =
   (fn x :
     {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
       NumPlayers : FFI(Basis.int), Roles : list(role),
       Round : FFI(Basis.int), Score : FFI(Basis.int)} =>
     (fn n : FFI(Basis.int) =>
       (fn acc :
         list({Member : FFI(Basis.int),
                Request : option(list(FFI(Basis.int)))}) =>
         (fn ls : list(role) =>
           (case ls of
             None => $rev'_unpoly None acc |
              Some {1 = x, 2 = ls} =>
               $mp'_unpoly_unpoly x (n + 1)
                (Some
                  {1 =
                    {Member = n,
                      Request =
                       (case x of
                         Resistance => None |
                          Spy =>
                           Some ($mp'_unpoly_unpoly 0 None x.Roles))},

                    2 = acc}) ls)))))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
     NumPlayers : FFI(Basis.int), Roles : list(role),
     Round : FFI(Basis.int), Score : FFI(Basis.int),
     Team : list(FFI(Basis.int))} ->
    list({Member : FFI(Basis.int), Request : {}}) ->
     list(FFI(Basis.int)) ->
      list({Member : FFI(Basis.int), Request : {}}) =
   (fn x :
     {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
       NumPlayers : FFI(Basis.int), Roles : list(role),
       Round : FFI(Basis.int), Score : FFI(Basis.int),
       Team : list(FFI(Basis.int))} =>
     (fn acc : list({Member : FFI(Basis.int), Request : {}}) =>
       (fn ls : list(FFI(Basis.int)) =>
         (case ls of
           None => $rev'_unpoly None acc |
            Some {1 = x, 2 = ls} =>
             $mp'_unpoly_unpoly x
              (Some
                {1 =
                  {Member = x,
                    Request =
                     (case
                       (case $nth_unpoly x.Roles x of
                         None =>
                          (error
                           "Nothing, not even this error, is impossible!"
                           : role) | Some role => role) of
                       Resistance => {} | Spy => {})}, 2 = acc}) ls))))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   FFI(Basis.int) ->
    list({Member : FFI(Basis.int), Request : {}}) ->
     list(role) -> list({Member : FFI(Basis.int), Request : {}}) =
   (fn n : FFI(Basis.int) =>
     (fn acc : list({Member : FFI(Basis.int), Request : {}}) =>
       (fn ls : list(role) =>
         (case ls of
           None => $rev'_unpoly None acc |
            Some {1 = x, 2 = ls} =>
             $mp'_unpoly_unpoly (n + 1)
              (Some
                {1 =
                  {Member = n,
                    Request =
                     (case x of Resistance => {} | Spy => {})},
                  2 = acc}) ls))))

 val rec
  $mp'_unpoly_unpoly as List/mp' :
   {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
     NumPlayers : FFI(Basis.int), Roles : list(role),
     Round : FFI(Basis.int), Score : FFI(Basis.int),
     Team : list(FFI(Basis.int))} ->
    FFI(Basis.int) ->
     list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
      ->
      list(role) ->
       list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
   =
   (fn x :
     {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
       NumPlayers : FFI(Basis.int), Roles : list(role),
       Round : FFI(Basis.int), Score : FFI(Basis.int),
       Team : list(FFI(Basis.int))} =>
     (fn n : FFI(Basis.int) =>
       (fn acc :
         list({Member : FFI(Basis.int),
                Request : list(FFI(Basis.int))}) =>
         (fn ls : list(role) =>
           (case ls of
             None => $rev'_unpoly None acc |
              Some {1 = x, 2 = ls} =>
               $mp'_unpoly_unpoly x (n + 1)
                (Some
                  {1 =
                    {Member = n,
                      Request =
                       (case x of
                         Resistance => x.Team | Spy => x.Team)},
                    2 = acc}) ls)))))

 val rec
  $merge_unpoly as List/merge :
   list(FFI(Basis.int)) ->
    list(FFI(Basis.int)) ->
     list(FFI(Basis.int)) -> list(FFI(Basis.int)) =
   (fn ls1 : list(FFI(Basis.int)) =>
     (fn ls2 : list(FFI(Basis.int)) =>
       (fn acc : list(FFI(Basis.int)) =>
         (case {1 = ls1, 2 = ls2} of
           {1 = None, 2 = _} => $ra_unpoly acc ls2 |
            {1 = _, 2 = None} => $ra_unpoly acc ls1 |
            {1 = Some {1 = x1, 2 = ls1'}, 2 = Some {1 = x2, 2 = ls2'}}
             =>
             (case (! (x1 <= x2)) of
               FFIC(Basis.True) =>
                $merge_unpoly ls1 ls2' (Some {1 = x2, 2 = acc}) |
                FFIC(Basis.False) =>
                 $merge_unpoly ls1' ls2 (Some {1 = x1, 2 = acc}))))))

 val rec
  $sort'_unpoly as List/sort' :
   list(FFI(Basis.int)) -> list(FFI(Basis.int)) =
   (fn ls : list(FFI(Basis.int)) =>
     (case ls of
       None => ls | Some {1 = _, 2 = None} => ls |
        _ =>
         (case $split_unpoly ls None None of
           {1 = ls1, 2 = ls2} =>
            $merge_unpoly ($sort'_unpoly ls1) ($sort'_unpoly ls2)
             None)))

 val rec
  $foldl'_unpoly_unpoly as List/foldl' :
   FFI(Basis.int) ->
    list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) ->
     FFI(Basis.int) =
   (fn acc : FFI(Basis.int) =>
     (fn ls :
       list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) =>
       (case ls of
         None => acc |
          Some {1 = x, 2 = ls} =>
           $foldl'_unpoly_unpoly
            ((case x.Response of
               FFIC(Basis.True) => 1 | FFIC(Basis.False) => 0) + acc)
            ls)))

 datatype
  $poly2904 =
   Done of {} -> list({Member : FFI(Basis.int), Request : {}}) |
    Mission of {} -> list({Member : FFI(Basis.int), Request : {}}) |
    New of
     {} ->
      list({Member : FFI(Basis.int),
             Request : option(list(FFI(Basis.int)))}) |
    Propose of
     {} ->
      list({Member : FFI(Basis.int),
             Request :
              {MissionSize : FFI(Basis.int),
                NumPlayers : FFI(Basis.int)}}) |
    Vote of
     {} ->
      list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
                                                                      and

   $poly2898 =
    Done of list({Member : FFI(Basis.int), Request : {}}) |
     Mission of list({Member : FFI(Basis.int), Request : {}}) |
     New of
      list({Member : FFI(Basis.int),
             Request : option(list(FFI(Basis.int)))}) |
     Propose of
      list({Member : FFI(Basis.int),
             Request :
              {MissionSize : FFI(Basis.int),
                NumPlayers : FFI(Basis.int)}}) |
     Vote of
      list({Member : FFI(Basis.int), Request : list(FFI(Basis.int))})
                                                                      and

   $poly2892 =
    Done of $poly2886 | Mission of $poly2886 | New of $poly2886 |
     Propose of $poly2886 | Vote of $poly2886 and
   $poly2886 =
    Done of {Roles : list(role), Winner : role} |
     Mission of
      {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
        NumPlayers : FFI(Basis.int), Roles : list(role),
        Round : FFI(Basis.int), Score : FFI(Basis.int),
        Team : list(FFI(Basis.int))} |
     New of
      {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
        NumPlayers : FFI(Basis.int), Roles : list(role),
        Round : FFI(Basis.int), Score : FFI(Basis.int)} |
     Propose of
      {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
        NumPlayers : FFI(Basis.int), Roles : list(role),
        Round : FFI(Basis.int), Score : FFI(Basis.int)} |
     Vote of
      {Attempt : FFI(Basis.int), Leader : FFI(Basis.int),
        NumPlayers : FFI(Basis.int), Roles : list(role),
        Round : FFI(Basis.int), Score : FFI(Basis.int),
        Team : list(FFI(Basis.int))} and
   $poly2880 =
    Done of {} -> {} |
     Mission of
      {} ->
       list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) |
     New of {} -> {} |
     Propose of
      {} ->
       list({Member : FFI(Basis.int), Response : list(FFI(Basis.int))})
                                                                        |

     Vote of
      {} ->
       list({Member : FFI(Basis.int), Response : FFI(Basis.bool)})
                                                                   and

   $poly2874 =
    Done of {} |
     Mission of
      list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) |
     New of {} |
     Propose of
      list({Member : FFI(Basis.int), Response : list(FFI(Basis.int))})
                                                                       |

     Vote of
      list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) and
   $poly2868 =
    Done of list({Member : FFI(Basis.int), Response : $poly2861}) |
     Mission of
      list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) |
     New of list({Member : FFI(Basis.int), Response : {}}) |
     Propose of
      list({Member : FFI(Basis.int), Response : list(FFI(Basis.int))})
                                                                       |

     Vote of
      list({Member : FFI(Basis.int), Response : FFI(Basis.bool)}) and
   $poly2862 =
    Done of $poly2861 | Mission of FFI(Basis.bool) | New of {} |
     Propose of list(FFI(Basis.int)) | Vote of FFI(Basis.bool) and
   $poly2861 =  and
   $poly2855 =
    Done of FFI(Basis.int) | Mission of FFI(Basis.int) |
     New of FFI(Basis.int) | Propose of FFI(Basis.int) |
     Vote of FFI(Basis.int)

 val
  urlify_$poly2849 as  : $poly2849 -> FFI(Basis.string) =
   (fn x : $poly2849 =>
     (case x of
       Done a => "Done/" | Mission a => "Mission/" |
        New a =>
         "New/" ^
          (case a of None => "None" | Some x => "Some/" ^ Done x) |
        Propose a =>
         "Propose/" ^
          FFI(Basis.urlifyInt(a.MissionSize)) ^
           "/" ^ FFI(Basis.urlifyInt(a.NumPlayers)) |
        Vote a => "Vote/" ^ Done a))

 val
  urlify_$poly2886 as  : $poly2886 -> FFI(Basis.string) =
   (fn x : $poly2886 =>
     (case x of
       Done a => "Done/" ^ (New a.Roles) ^ "/" ^ Propose a.Winner |
        Mission a =>
         "Mission/" ^
          FFI(Basis.urlifyInt(a.Attempt)) ^
           "/" ^
            FFI(Basis.urlifyInt(a.Leader)) ^
             "/" ^
              FFI(Basis.urlifyInt(a.NumPlayers)) ^
               "/" ^
                (New a.Roles) ^
                 "/" ^
                  FFI(Basis.urlifyInt(a.Round)) ^
                   "/" ^
                    FFI(Basis.urlifyInt(a.Score)) ^ "/" ^ Done a.Team
                                                                      |

        New a =>
         "New/" ^
          FFI(Basis.urlifyInt(a.Attempt)) ^
           "/" ^
            FFI(Basis.urlifyInt(a.Leader)) ^
             "/" ^
              FFI(Basis.urlifyInt(a.NumPlayers)) ^
               "/" ^
                (New a.Roles) ^
                 "/" ^
                  FFI(Basis.urlifyInt(a.Round)) ^
                   "/" ^ FFI(Basis.urlifyInt(a.Score)) |
        Propose a =>
         "Propose/" ^
          FFI(Basis.urlifyInt(a.Attempt)) ^
           "/" ^
            FFI(Basis.urlifyInt(a.Leader)) ^
             "/" ^
              FFI(Basis.urlifyInt(a.NumPlayers)) ^
               "/" ^
                (New a.Roles) ^
                 "/" ^
                  FFI(Basis.urlifyInt(a.Round)) ^
                   "/" ^ FFI(Basis.urlifyInt(a.Score)) |
        Vote a =>
         "Vote/" ^
          FFI(Basis.urlifyInt(a.Attempt)) ^
           "/" ^
            FFI(Basis.urlifyInt(a.Leader)) ^
             "/" ^
              FFI(Basis.urlifyInt(a.NumPlayers)) ^
               "/" ^
                (New a.Roles) ^
                 "/" ^
                  FFI(Basis.urlifyInt(a.Round)) ^
                   "/" ^
                    FFI(Basis.urlifyInt(a.Score)) ^ "/" ^ Done a.Team))

 val
  urlify_$poly2862 as  : $poly2862 -> FFI(Basis.string) =
   (fn x : $poly2862 =>
     (case x of
       Done a => "Done/" ^ (case a of ) |
        Mission a => "Mission/" ^ FFI(Basis.urlifyBool(a)) |
        New a => "New/" | Propose a => "Propose/" ^ Done a |
        Vote a => "Vote/" ^ FFI(Basis.urlifyBool(a))))

 val
  urlify_$poly2855 as  : $poly2855 -> FFI(Basis.string) =
   (fn x : $poly2855 =>
     (case x of
       Done a => "Done/" ^ FFI(Basis.urlifyInt(a)) |
        Mission a => "Mission/" ^ FFI(Basis.urlifyInt(a)) |
        New a => "New/" ^ FFI(Basis.urlifyInt(a)) |
        Propose a => "Propose/" ^ FFI(Basis.urlifyInt(a)) |
        Vote a => "Vote/" ^ FFI(Basis.urlifyInt(a))))

 val
  handle as Game/handle :
   {Group : FFI(Basis.int), Key : FFI(Basis.int),
     Member : FFI(Basis.int)} ->
    FFI(Basis.int) -> $poly2862 -> {} -> {} =
   (fn user :
     {Group : FFI(Basis.int), Key : FFI(Basis.int),
       Member : FFI(Basis.int)} =>
     (fn job : FFI(Basis.int) =>
       (fn resp : $poly2862 =>
         (let instance : {Instance : option(FFI(Basis.string))} =
          ({Instance =
             Some
              (urlify_$poly2855
                (case resp of
                  Done x => Done job | Mission x => Mission job |
                   New x => New job | Propose x => Propose job |
                   Vote x => Vote job))}) in
          ((fn _ : {} =>
             (case
               query[] [T :
                         {Key : FFI(Basis.int),
                           Member : FFI(Basis.int),
                           Response : option(FFI(Basis.string))}] [option($poly2868)]
                "SELECT T_T.uw_Key, T_T.uw_Member, T_T.uw_Response FROM uw_Game_users AS T_T WHERE ((T_T.uw_group = "
                 ^
                 FFI(Basis.sqlifyInt(user.Group)) ^
                  ") AND (" ^
                   (let e2 : FFI(Basis.string) =
                    ((case instance.Instance of
                       None => "NULL::text" |
                        Some y => FFI(Basis.sqlifyString(y)))) in
                    ("((T_T.uw_instance = " ^
                      e2 ^
                       ") OR ((T_T.uw_instance) IS NULL AND (" ^
                        e2 ^ ") IS NULL))")) ^
                    " AND TRUE)) GROUP BY T_T.uw_Key, T_T.uw_Member, T_T.uw_Response"
                initial
                Some
                 (case resp of
                   Done x => Done None | Mission x => Mission None |
                    New x => New None | Propose x => Propose None |
                    Vote x => Vote None) in
                (let x : option($poly2868) =
                 ((case r.T of
                    {Member = member', Key = key', Response = respzq}
                     =>
                     (case
                       (case
                         (case (key' == user.Key) of
                           FFIC(Basis.True) => FFIC(Basis.False) |
                            FFIC(Basis.False) => FFIC(Basis.True)) of
                         FFIC(Basis.True) => None |
                          FFIC(Basis.False) =>
                           (case (member' == user.Member) of
                             FFIC(Basis.True) =>
                              Some (urlify_$poly2862 resp) |
                              FFIC(Basis.False) => respzq)) of
                       None => None |
                        Some v =>
                         (case acc of
                           None => None |
                            Some v =>
                             (case unurlify(v) of
                               Done x =>
                                (case v of
                                  Done x =>
                                   Some
                                    (Done
                                      (Some
                                        {1 =
                                          {Member = user.Member,
                                            Response = x}, 2 = x})) |
                                   Mission x => None |
                                   New x => None |
                                   Propose x => None | Vote x => None)
                                                                       |

                                Mission x =>
                                 (case v of
                                   Done x => None |
                                    Mission x =>
                                     Some
                                      (Mission
                                        (Some
                                          {1 =
                                            {Member = user.Member,
                                              Response = x}, 2 = x}))
                                                                      |

                                    New x => None |
                                    Propose x => None |
                                    Vote x => None) |
                                New x =>
                                 (case v of
                                   Done x => None |
                                    Mission x => None |
                                    New x =>
                                     Some
                                      (New
                                        (Some
                                          {1 =
                                            {Member = user.Member,
                                              Response = x}, 2 = x}))
                                                                      |

                                    Propose x => None |
                                    Vote x => None) |
                                Propose x =>
                                 (case v of
                                   Done x => None |
                                    Mission x => None |
                                    New x => None |
                                    Propose x =>
                                     Some
                                      (Propose
                                        (Some
                                          {1 =
                                            {Member = user.Member,
                                              Response = x}, 2 = x}))
                                                                      |

                                    Vote x => None) |
                                Vote x =>
                                 (case v of
                                   Done x => None |
                                    Mission x => None |
                                    New x => None |
                                    Propose x => None |
                                    Vote x =>
                                     Some
                                      (Vote
                                        (Some
                                          {1 =
                                            {Member = user.Member,
                                              Response = x}, 2 = x}))))))))
                 in (x)) of
               None =>
                dml("UPDATE uw_Game_users AS T_T SET uw_Response = "
                     ^
                     (case Some (urlify_$poly2862 resp) of
                       None => "NULL::text" |
                        Some y => FFI(Basis.sqlifyString(y))) ^
                      " WHERE ((T_T.uw_group = " ^
                       FFI(Basis.sqlifyInt(user.Group)) ^
                        ") AND ((T_T.uw_key = " ^
                         FFI(Basis.sqlifyInt(user.Key)) ^
                          ") AND ((T_T.uw_member = " ^
                           FFI(Basis.sqlifyInt(user.Member)) ^
                            ") AND (" ^
                             (let e2 : FFI(Basis.string) =
                              ((case instance.Instance of
                                 None => "NULL::text" |
                                  Some y =>
                                   FFI(Basis.sqlifyString(y)))) in
                              ("((T_T.uw_instance = " ^
                                e2 ^
                                 ") OR ((T_T.uw_instance) IS NULL AND ("
                                  ^ e2 ^ ") IS NULL))")) ^
                              " AND TRUE))))") |
                Some resps =>
                 (let _ : {} =
                  (dml("UPDATE uw_Game_users AS T_T SET uw_Instance = NULL::text, uw_Response = NULL::text WHERE ((T_T.uw_group = "
                        ^
                        FFI(Basis.sqlifyInt(user.Group)) ^
                         ") AND TRUE)")) in
                  ((case resps of
                     Done x =>
                      (let cond : FFI(Basis.string) =
                       ("((T_T.uw_label = " ^
                         FFI(Basis.sqlifyInt(user.Group)) ^
                          ") AND TRUE)") in
                       ((let $x : {State : FFI(Basis.string)} =
                         ((case
                            query[] [T : {State : FFI(Basis.string)}] [option({T
                                                                                :
                                                                                {State
                                                                                  :
                                                                                  FFI(Basis.string)}})]
                             "SELECT T_T.uw_State FROM uw_Game_Sm_sms AS T_T"
                              ^
                              (case cond of
                                "TRUE" => "" |
                                 where => " WHERE " ^ where) ^
                               " GROUP BY T_T.uw_State" initial None
                             in Some r of
                            None =>
                             (error "Query returned no rows" :
                              {State : FFI(Basis.string)}) |
                             Some r => r.T)) in
                         ((case
                            (case $x of
                              {State = statez} =>
                               (case
                                 (case
                                   (case unurlify(statez) of
                                     Done x => Some (Done (Done x)) |
                                      Mission x => None |
                                      New x => None |
                                      Propose x => None |
                                      Vote x => None) of
                                   None => None |
                                    Some y =>
                                     Some
                                      (case y of
                                        Done x => x |
                                         Mission x => x |
                                         New x => x |
                                         Propose x => x | Vote x => x))
                                 of
                                 None => None |
                                  Some state =>
                                   (let _ : {} =
                                    (dml("UPDATE uw_Game_Sm_sms AS T_T SET uw_State = "
                                          ^
                                          FFI(Basis.sqlifyString(urlify_$poly2886
                                                                  state))
                                           ^ " WHERE " ^ cond)) in
                                    (Some state)))) of
                            None =>
                             (error
                              "Nothing, not even this error, is impossible!"
                              : {} -> {}) {} |
                             Some state =>
                              (let v : $poly2904 =
                               ((case state of
                                  Done x =>
                                   Done
                                    (fn _ : {} =>
                                      (let _ : {} =
                                       (broadcast user.Group
                                         (Victory x) {}) in
                                       ((let _ : {} =
                                         (dml("DELETE FROM uw_Game_games AS T_T WHERE ((T_T.uw_group = "
                                               ^
                                               FFI(Basis.sqlifyInt(user.Group))
                                                ^ ") AND TRUE)")) in
                                         ($mp'_unpoly_unpoly 0 None
                                           x.Roles))))) |
                                   Mission x =>
                                    Mission
                                     (fn _ : {} =>
                                       (let _ : {} =
                                        (broadcast user.Group
                                          (Acting x.Team) {}) in
                                        ($mp'_unpoly_unpoly x None
                                          x.Team))) |
                                   New x =>
                                    New
                                     (fn _ : {} =>
                                       $mp'_unpoly_unpoly x 0 None
                                        x.Roles) |
                                   Propose x =>
                                    Propose
                                     (fn _ : {} =>
                                       (let _ : {} =
                                        (broadcast user.Group
                                          (Proposing x.Leader) {}) in
                                        (Some
                                          {1 =
                                            {Member = x.Leader,
                                              Request =
                                               (case
                                                 $nth_unpoly
                                                  (case x.NumPlayers
                                                    of
                                                    5 =>
                                                     Some
                                                      {1 = 2,
                                                        2 =
                                                         Some
                                                          {1 = 3,
                                                            2 =
                                                             Some
                                                              {1 = 2,
                                                                2 =
                                                                 Some
                                                                  {1
                                                                    =
                                                                    3,

                                                                    2
                                                                     =
                                                                     Some
                                                                      {1
                                                                        =
                                                                        3,

                                                                        2
                                                                         =
                                                                         None}}}}}
                                                                                   |

                                                     6 =>
                                                      Some
                                                       {1 = 2,
                                                         2 =
                                                          Some
                                                           {1 = 3,
                                                             2 =
                                                              Some
                                                               {1 = 4,

                                                                 2 =
                                                                  Some
                                                                   {1
                                                                     =
                                                                     3,

                                                                     2
                                                                      =
                                                                      Some
                                                                       {1
                                                                         =
                                                                         4,

                                                                         2
                                                                          =
                                                                          None}}}}}
                                                                                    |

                                                     7 =>
                                                      Some
                                                       {1 = 2,
                                                         2 =
                                                          Some
                                                           {1 = 3,
                                                             2 =
                                                              Some
                                                               {1 = 3,

                                                                 2 =
                                                                  Some
                                                                   {1
                                                                     =
                                                                     4,

                                                                     2
                                                                      =
                                                                      Some
                                                                       {1
                                                                         =
                                                                         4,

                                                                         2
                                                                          =
                                                                          None}}}}}
                                                                                    |

                                                     _ =>
                                                      Some
                                                       {1 = 3,
                                                         2 =
                                                          Some
                                                           {1 = 4,
                                                             2 =
                                                              Some
                                                               {1 = 4,

                                                                 2 =
                                                                  Some
                                                                   {1
                                                                     =
                                                                     5,

                                                                     2
                                                                      =
                                                                      Some
                                                                       {1
                                                                         =
                                                                         5,

                                                                         2
                                                                          =
                                                                          None}}}}})
                                                  x.Round of
                                                 Some n =>
                                                  {MissionSize = n,
                                                    NumPlayers =
                                                     x.NumPlayers} |
                                                  None =>
                                                   (error
                                                    "Nothing, not even this error, is impossible!"
                                                    :
                                                    {MissionSize :
                                                      FFI(Basis.int),
                                                      NumPlayers :
                                                       FFI(Basis.int)}))},

                                            2 = None}))) |
                                   Vote x =>
                                    Vote
                                     (fn _ : {} =>
                                       (let _ : {} =
                                        (broadcast user.Group
                                          (Voting x.Team) {}) in
                                        ($mp'_unpoly_unpoly x 0 None
                                          x.Roles))))) in
                               ((let request : $poly2898 =
                                 ((case v of
                                    Done x => Done (x {}) |
                                     Mission x => Mission (x {}) |
                                     New x => New (x {}) |
                                     Propose x => Propose (x {}) |
                                     Vote x => Vote (x {}))) in
                                 ((let reqs :
                                   list({Member : FFI(Basis.int),
                                          Request : $poly2849}) =
                                   ((case request of
                                      Done x =>
                                       $mp'_unpoly_unpoly None x |
                                       Mission x =>
                                        $mp'_unpoly_unpoly None x |
                                       New x =>
                                        $mp'_unpoly_unpoly None x |
                                       Propose x =>
                                        $mp'_unpoly_unpoly None x |
                                       Vote x =>
                                        $mp'_unpoly_unpoly None x))
                                   in
                                   ((let cond : FFI(Basis.string) =
                                     ("((T_T.uw_group = " ^
                                       FFI(Basis.sqlifyInt(user.Group))
                                        ^
                                        ") AND " ^
                                         ($foldl'_unpoly_unpoly
                                           "TRUE"
                                           ($mp'_unpoly_unpoly None
                                             ($mp'_unpoly_unpoly None
                                               reqs))) ^ ")") in
                                     ((let job : FFI(Basis.int) =
                                       (nextval("uw_Game_jobs")) in
                                       ((let _ : {} =
                                         (query[] [T :
                                                    {Channel :
                                                      FFI(Basis.channel),

                                                      Member :
                                                       FFI(Basis.int)}] [{}]
                                           "SELECT T_T.uw_Channel, T_T.uw_Member FROM uw_Game_users AS T_T"
                                            ^
                                            (case cond of
                                              "TRUE" => "" |
                                               where =>
                                                " WHERE " ^ where) ^
                                             " GROUP BY T_T.uw_Channel, T_T.uw_Member"
                                           initial {} in
                                           (case r.T of
                                             {Member = member,
                                               Channel = chan} =>
                                              (let v :
                                               {Job : FFI(Basis.int),
                                                 Request : $poly2849}
                                               =
                                               ({Job = job,
                                                  Request =
                                                   (case
                                                     $find'_unpoly
                                                      member reqs of
                                                     None =>
                                                      (error
                                                       "Nothing, not even this error, is impossible!"
                                                       :
                                                       {Request :
                                                         $poly2849})
                                                                     |

                                                      Some req =>
                                                       {Request =
                                                         req.Request}).Request})
                                               in
                                               (FFI(Basis.send(chan,
                                                                FFI(Basis.urlifyInt(v.Job))
                                                                 ^
                                                                 "/"
                                                                  ^
                                                                  urlify_$poly2849
                                                                   v.Request))))))
                                         in
                                         (dml("UPDATE uw_Game_users AS T_T SET uw_Instance = "
                                               ^
                                               (case
                                                 Some
                                                  (urlify_$poly2855
                                                    (case request of
                                                      Done x =>
                                                       Done job |
                                                       Mission x =>
                                                        Mission job |
                                                       New x =>
                                                        New job |
                                                       Propose x =>
                                                        Propose job |
                                                       Vote x =>
                                                        Vote job)) of
                                                 None => "NULL::text"
                                                                      |

                                                  Some y =>
                                                   FFI(Basis.sqlifyString(y)))
                                                ^ " WHERE " ^ cond))))))))))))))))))
                                                                                     |

                      Mission x =>
                       (let resp : $poly2874 =
                        (Mission
                          (let _ : {} =
                           (broadcast user.Group
                             (Actions
                               {Fails = $foldl'_unpoly_unpoly 0 x,
                                 Successes =
                                  $foldl'_unpoly_unpoly 0 x}) {}) in
                           (x))) in
                        ((let cond : FFI(Basis.string) =
                          ("((T_T.uw_label = " ^
                            FFI(Basis.sqlifyInt(user.Group)) ^
                             ") AND TRUE)") in
                          ((let $x : {State : FFI(Basis.string)} =
                            ((case
                               query[] [T :
                                         {State : FFI(Basis.string)}] [option({T
                                                                                :
                                                                                {State
                                                                                  :
                                                                                  FFI(Basis.string)}})]
                                "SELECT T_T.uw_State FROM uw_Game_Sm_sms AS T_T"
                                 ^
                                 (case cond of
                                   "TRUE" => "" |
                                    where => " WHERE " ^ where) ^
                                  " GROUP BY T_T.uw_State" initial
                                None in Some r of
                               None =>
                                (error "Query returned no rows" :
                                 {State : FFI(Basis.string)}) |
                                Some r => r.T)) in
                            ((case
                               (case $x of
                                 {State = statez} =>
                                  (case
                                    (case
                                      (case unurlify(statez) of
                                        Done x =>
                                         (case resp of
                                           Done x =>
                                            Some
                                             (Done
                                               (case
                                                 {Effect = x,
                                                   State = x} of
                                                 {State = xs,
                                                   Effect = {}} =>
                                                  Done xs)) |
                                            Mission x => None |
                                            New x => None |
                                            Propose x => None |
                                            Vote x => None) |
                                         Mission x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x =>
                                              Some
                                               (let y :
                                                FFI(Basis.int) =
                                                ((case
                                                   (($foldl'_unpoly_unpoly
                                                      0 x) <=
                                                     (case
                                                       (case
                                                         (x.Round ==
                                                           3) of
                                                         FFIC(Basis.True)
                                                          =>
                                                          (x.NumPlayers
                                                            < 7) |
                                                          FFIC(Basis.False)
                                                           =>
                                                           FFIC(Basis.False))
                                                       of
                                                       FFIC(Basis.True)
                                                        => 1 |
                                                        FFIC(Basis.False)
                                                         => 0)) of
                                                   FFIC(Basis.True)
                                                    => 1 |
                                                    FFIC(Basis.False)
                                                     => 0)) in
                                                ((let score :
                                                  FFI(Basis.int) =
                                                  ((x.Score + y)) in
                                                  ((let x : $poly2886
                                                    =
                                                    ((case
                                                       (! (score < 3))
                                                       of
                                                       FFIC(Basis.True)
                                                        =>
                                                        Done
                                                         {Roles =
                                                           x.Roles,
                                                           Winner =
                                                            Resistance}
                                                                        |

                                                        FFIC(Basis.False)
                                                         =>
                                                         (case
                                                           (!
                                                             ((x.Round
                                                                -
                                                                score)
                                                               < 3))
                                                           of
                                                           FFIC(Basis.True)
                                                            =>
                                                            Done
                                                             {Roles =
                                                               x.Roles,

                                                               Winner
                                                                = Spy}
                                                                       |

                                                            FFIC(Basis.False)
                                                             =>
                                                             Propose
                                                              {Attempt
                                                                = 0,
                                                                Leader
                                                                 =
                                                                 ((x.Leader
                                                                    +
                                                                    1)
                                                                   %
                                                                   x.NumPlayers),

                                                                NumPlayers
                                                                 =
                                                                 x.NumPlayers,

                                                                Roles
                                                                 =
                                                                 x.Roles,

                                                                Round
                                                                 =
                                                                 (x.Round
                                                                   +
                                                                   1),

                                                                Score
                                                                 =
                                                                 score})))
                                                    in (Mission x))))))
                                                                        |

                                             New x => None |
                                             Propose x => None |
                                             Vote x => None) |
                                         New x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x => None |
                                             New x =>
                                              Some
                                               (New
                                                 (case
                                                   {Effect = x,
                                                     State = x} of
                                                   {State = xs,
                                                     Effect = {}} =>
                                                    Propose xs)) |
                                             Propose x => None |
                                             Vote x => None) |
                                         Propose x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x => None |
                                             New x => None |
                                             Propose x =>
                                              Some
                                               (Propose
                                                 (Vote
                                                   {Attempt =
                                                     x.Attempt,
                                                     Leader =
                                                      x.Leader,
                                                     NumPlayers =
                                                      x.NumPlayers,
                                                     Roles = x.Roles,
                                                     Round = x.Round,
                                                     Score = x.Score,
                                                     Team =
                                                      (case x of
                                                        Some
                                                         {1 =
                                                           {Member =
                                                             player,
                                                             Response
                                                              = team},

                                                           2 = None}
                                                         =>
                                                         (case
                                                           (player ==
                                                             x.Leader)
                                                           of
                                                           FFIC(Basis.True)
                                                            =>
                                                            $sort'_unpoly
                                                             team |
                                                            FFIC(Basis.False)
                                                             =>
                                                             (error
                                                              "Nothing, not even this error, is impossible!"
                                                              :
                                                              list(FFI(Basis.int))))
                                                                                     |

                                                         _ =>
                                                          (error
                                                           "Nothing, not even this error, is impossible!"
                                                           :
                                                           list(FFI(Basis.int))))}))
                                                                                     |

                                             Vote x => None) |
                                         Vote x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x => None |
                                             New x => None |
                                             Propose x => None |
                                             Vote x =>
                                              Some
                                               (let x : $poly2886 =
                                                ((case
                                                   (($foldl'_unpoly_unpoly
                                                      0 x) <
                                                     (x.NumPlayers /
                                                       2)) of
                                                   FFIC(Basis.True)
                                                    => Mission x |
                                                    FFIC(Basis.False)
                                                     =>
                                                     Propose
                                                      {Attempt =
                                                        (x.Attempt +
                                                          1),
                                                        Leader =
                                                         x.Leader,
                                                        NumPlayers =
                                                         x.NumPlayers,

                                                        Roles =
                                                         x.Roles,
                                                        Round =
                                                         x.Round,
                                                        Score =
                                                         x.Score}))
                                                in (Vote x)))) of
                                      None => None |
                                       Some y =>
                                        Some
                                         (case y of
                                           Done x => x |
                                            Mission x => x |
                                            New x => x |
                                            Propose x => x |
                                            Vote x => x)) of
                                    None => None |
                                     Some state =>
                                      (let _ : {} =
                                       (dml("UPDATE uw_Game_Sm_sms AS T_T SET uw_State = "
                                             ^
                                             FFI(Basis.sqlifyString(urlify_$poly2886
                                                                     state))
                                              ^ " WHERE " ^ cond)) in
                                       (Some state)))) of
                               None =>
                                (error
                                 "Nothing, not even this error, is impossible!"
                                 : {} -> {}) {} |
                                Some state =>
                                 (let v : $poly2904 =
                                  ((case state of
                                     Done x =>
                                      Done
                                       (fn _ : {} =>
                                         (let _ : {} =
                                          (broadcast user.Group
                                            (Victory x) {}) in
                                          ((let _ : {} =
                                            (dml("DELETE FROM uw_Game_games AS T_T WHERE ((T_T.uw_group = "
                                                  ^
                                                  FFI(Basis.sqlifyInt(user.Group))
                                                   ^ ") AND TRUE)"))
                                            in
                                            ($mp'_unpoly_unpoly 0
                                              None x.Roles))))) |
                                      Mission x =>
                                       Mission
                                        (fn _ : {} =>
                                          (let _ : {} =
                                           (broadcast user.Group
                                             (Acting x.Team) {}) in
                                           ($mp'_unpoly_unpoly x None
                                             x.Team))) |
                                      New x =>
                                       New
                                        (fn _ : {} =>
                                          $mp'_unpoly_unpoly x 0 None
                                           x.Roles) |
                                      Propose x =>
                                       Propose
                                        (fn _ : {} =>
                                          (let _ : {} =
                                           (broadcast user.Group
                                             (Proposing x.Leader) {})
                                           in
                                           (Some
                                             {1 =
                                               {Member = x.Leader,
                                                 Request =
                                                  (case
                                                    $nth_unpoly
                                                     (case
                                                       x.NumPlayers
                                                       of
                                                       5 =>
                                                        Some
                                                         {1 = 2,
                                                           2 =
                                                            Some
                                                             {1 = 3,
                                                               2 =
                                                                Some
                                                                 {1 =
                                                                   2,
                                                                   2
                                                                    =
                                                                    Some
                                                                     {1
                                                                       =
                                                                       3,

                                                                       2
                                                                        =
                                                                        Some
                                                                         {1
                                                                           =
                                                                           3,

                                                                           2
                                                                            =
                                                                            None}}}}}
                                                                                      |

                                                        6 =>
                                                         Some
                                                          {1 = 2,
                                                            2 =
                                                             Some
                                                              {1 = 3,
                                                                2 =
                                                                 Some
                                                                  {1
                                                                    =
                                                                    4,

                                                                    2
                                                                     =
                                                                     Some
                                                                      {1
                                                                        =
                                                                        3,

                                                                        2
                                                                         =
                                                                         Some
                                                                          {1
                                                                            =
                                                                            4,

                                                                            2
                                                                             =
                                                                             None}}}}}
                                                                                       |

                                                        7 =>
                                                         Some
                                                          {1 = 2,
                                                            2 =
                                                             Some
                                                              {1 = 3,
                                                                2 =
                                                                 Some
                                                                  {1
                                                                    =
                                                                    3,

                                                                    2
                                                                     =
                                                                     Some
                                                                      {1
                                                                        =
                                                                        4,

                                                                        2
                                                                         =
                                                                         Some
                                                                          {1
                                                                            =
                                                                            4,

                                                                            2
                                                                             =
                                                                             None}}}}}
                                                                                       |

                                                        _ =>
                                                         Some
                                                          {1 = 3,
                                                            2 =
                                                             Some
                                                              {1 = 4,
                                                                2 =
                                                                 Some
                                                                  {1
                                                                    =
                                                                    4,

                                                                    2
                                                                     =
                                                                     Some
                                                                      {1
                                                                        =
                                                                        5,

                                                                        2
                                                                         =
                                                                         Some
                                                                          {1
                                                                            =
                                                                            5,

                                                                            2
                                                                             =
                                                                             None}}}}})
                                                     x.Round of
                                                    Some n =>
                                                     {MissionSize = n,

                                                       NumPlayers =
                                                        x.NumPlayers}
                                                                      |

                                                     None =>
                                                      (error
                                                       "Nothing, not even this error, is impossible!"
                                                       :
                                                       {MissionSize :
                                                         FFI(Basis.int),

                                                         NumPlayers :
                                                          FFI(Basis.int)}))},

                                               2 = None}))) |
                                      Vote x =>
                                       Vote
                                        (fn _ : {} =>
                                          (let _ : {} =
                                           (broadcast user.Group
                                             (Voting x.Team) {}) in
                                           ($mp'_unpoly_unpoly x 0
                                             None x.Roles))))) in
                                  ((let request : $poly2898 =
                                    ((case v of
                                       Done x => Done (x {}) |
                                        Mission x => Mission (x {}) |
                                        New x => New (x {}) |
                                        Propose x => Propose (x {}) |
                                        Vote x => Vote (x {}))) in
                                    ((let reqs :
                                      list({Member : FFI(Basis.int),
                                             Request : $poly2849}) =
                                      ((case request of
                                         Done x =>
                                          $mp'_unpoly_unpoly None x |
                                          Mission x =>
                                           $mp'_unpoly_unpoly None x
                                                                     |

                                          New x =>
                                           $mp'_unpoly_unpoly None x
                                                                     |

                                          Propose x =>
                                           $mp'_unpoly_unpoly None x
                                                                     |

                                          Vote x =>
                                           $mp'_unpoly_unpoly None x))
                                      in
                                      ((let cond : FFI(Basis.string)
                                        =
                                        ("((T_T.uw_group = " ^
                                          FFI(Basis.sqlifyInt(user.Group))
                                           ^
                                           ") AND " ^
                                            ($foldl'_unpoly_unpoly
                                              "TRUE"
                                              ($mp'_unpoly_unpoly
                                                None
                                                ($mp'_unpoly_unpoly
                                                  None reqs))) ^ ")")
                                        in
                                        ((let job : FFI(Basis.int) =
                                          (nextval("uw_Game_jobs"))
                                          in
                                          ((let _ : {} =
                                            (query[] [T :
                                                       {Channel :
                                                         FFI(Basis.channel),

                                                         Member :
                                                          FFI(Basis.int)}] [{}]
                                              "SELECT T_T.uw_Channel, T_T.uw_Member FROM uw_Game_users AS T_T"
                                               ^
                                               (case cond of
                                                 "TRUE" => "" |
                                                  where =>
                                                   " WHERE " ^ where)
                                                ^
                                                " GROUP BY T_T.uw_Channel, T_T.uw_Member"
                                              initial {} in
                                              (case r.T of
                                                {Member = member,
                                                  Channel = chan} =>
                                                 (let v :
                                                  {Job :
                                                    FFI(Basis.int),
                                                    Request :
                                                     $poly2849} =
                                                  ({Job = job,
                                                     Request =
                                                      (case
                                                        $find'_unpoly
                                                         member reqs
                                                        of
                                                        None =>
                                                         (error
                                                          "Nothing, not even this error, is impossible!"
                                                          :
                                                          {Request :
                                                            $poly2849})
                                                                        |

                                                         Some req =>
                                                          {Request =
                                                            req.Request}).Request})
                                                  in
                                                  (FFI(Basis.send(chan,

                                                                   FFI(Basis.urlifyInt(v.Job))
                                                                    ^
                                                                    "/"
                                                                     ^
                                                                     urlify_$poly2849
                                                                      v.Request))))))
                                            in
                                            (dml("UPDATE uw_Game_users AS T_T SET uw_Instance = "
                                                  ^
                                                  (case
                                                    Some
                                                     (urlify_$poly2855
                                                       (case request
                                                         of
                                                         Done x =>
                                                          Done job |
                                                          Mission x
                                                           =>
                                                           Mission
                                                            job |
                                                          New x =>
                                                           New job |
                                                          Propose x
                                                           =>
                                                           Propose
                                                            job |
                                                          Vote x =>
                                                           Vote job))
                                                    of
                                                    None =>
                                                     "NULL::text" |
                                                     Some y =>
                                                      FFI(Basis.sqlifyString(y)))
                                                   ^ " WHERE " ^ cond))))))))))))))))))))
                                                                                          |

                      New x =>
                       (let cond : FFI(Basis.string) =
                        ("((T_T.uw_label = " ^
                          FFI(Basis.sqlifyInt(user.Group)) ^
                           ") AND TRUE)") in
                        ((let $x : {State : FFI(Basis.string)} =
                          ((case
                             query[] [T : {State : FFI(Basis.string)}] [option({T
                                                                                 :
                                                                                 {State
                                                                                   :
                                                                                   FFI(Basis.string)}})]
                              "SELECT T_T.uw_State FROM uw_Game_Sm_sms AS T_T"
                               ^
                               (case cond of
                                 "TRUE" => "" |
                                  where => " WHERE " ^ where) ^
                                " GROUP BY T_T.uw_State" initial None
                              in Some r of
                             None =>
                              (error "Query returned no rows" :
                               {State : FFI(Basis.string)}) |
                              Some r => r.T)) in
                          ((case
                             (case $x of
                               {State = statez} =>
                                (case
                                  (case
                                    (case unurlify(statez) of
                                      Done x => None |
                                       Mission x => None |
                                       New x =>
                                        Some (New (Propose x)) |
                                       Propose x => None |
                                       Vote x => None) of
                                    None => None |
                                     Some y =>
                                      Some
                                       (case y of
                                         Done x => x |
                                          Mission x => x |
                                          New x => x |
                                          Propose x => x |
                                          Vote x => x)) of
                                  None => None |
                                   Some state =>
                                    (let _ : {} =
                                     (dml("UPDATE uw_Game_Sm_sms AS T_T SET uw_State = "
                                           ^
                                           FFI(Basis.sqlifyString(urlify_$poly2886
                                                                   state))
                                            ^ " WHERE " ^ cond)) in
                                     (Some state)))) of
                             None =>
                              (error
                               "Nothing, not even this error, is impossible!"
                               : {} -> {}) {} |
                              Some state =>
                               (let v : $poly2904 =
                                ((case state of
                                   Done x =>
                                    Done
                                     (fn _ : {} =>
                                       (let _ : {} =
                                        (broadcast user.Group
                                          (Victory x) {}) in
                                        ((let _ : {} =
                                          (dml("DELETE FROM uw_Game_games AS T_T WHERE ((T_T.uw_group = "
                                                ^
                                                FFI(Basis.sqlifyInt(user.Group))
                                                 ^ ") AND TRUE)")) in
                                          ($mp'_unpoly_unpoly 0 None
                                            x.Roles))))) |
                                    Mission x =>
                                     Mission
                                      (fn _ : {} =>
                                        (let _ : {} =
                                         (broadcast user.Group
                                           (Acting x.Team) {}) in
                                         ($mp'_unpoly_unpoly x None
                                           x.Team))) |
                                    New x =>
                                     New
                                      (fn _ : {} =>
                                        $mp'_unpoly_unpoly x 0 None
                                         x.Roles) |
                                    Propose x =>
                                     Propose
                                      (fn _ : {} =>
                                        (let _ : {} =
                                         (broadcast user.Group
                                           (Proposing x.Leader) {})
                                         in
                                         (Some
                                           {1 =
                                             {Member = x.Leader,
                                               Request =
                                                (case
                                                  $nth_unpoly
                                                   (case x.NumPlayers
                                                     of
                                                     5 =>
                                                      Some
                                                       {1 = 2,
                                                         2 =
                                                          Some
                                                           {1 = 3,
                                                             2 =
                                                              Some
                                                               {1 = 2,

                                                                 2 =
                                                                  Some
                                                                   {1
                                                                     =
                                                                     3,

                                                                     2
                                                                      =
                                                                      Some
                                                                       {1
                                                                         =
                                                                         3,

                                                                         2
                                                                          =
                                                                          None}}}}}
                                                                                    |

                                                      6 =>
                                                       Some
                                                        {1 = 2,
                                                          2 =
                                                           Some
                                                            {1 = 3,
                                                              2 =
                                                               Some
                                                                {1 =
                                                                  4,
                                                                  2 =
                                                                   Some
                                                                    {1
                                                                      =
                                                                      3,

                                                                      2
                                                                       =
                                                                       Some
                                                                        {1
                                                                          =
                                                                          4,

                                                                          2
                                                                           =
                                                                           None}}}}}
                                                                                     |

                                                      7 =>
                                                       Some
                                                        {1 = 2,
                                                          2 =
                                                           Some
                                                            {1 = 3,
                                                              2 =
                                                               Some
                                                                {1 =
                                                                  3,
                                                                  2 =
                                                                   Some
                                                                    {1
                                                                      =
                                                                      4,

                                                                      2
                                                                       =
                                                                       Some
                                                                        {1
                                                                          =
                                                                          4,

                                                                          2
                                                                           =
                                                                           None}}}}}
                                                                                     |

                                                      _ =>
                                                       Some
                                                        {1 = 3,
                                                          2 =
                                                           Some
                                                            {1 = 4,
                                                              2 =
                                                               Some
                                                                {1 =
                                                                  4,
                                                                  2 =
                                                                   Some
                                                                    {1
                                                                      =
                                                                      5,

                                                                      2
                                                                       =
                                                                       Some
                                                                        {1
                                                                          =
                                                                          5,

                                                                          2
                                                                           =
                                                                           None}}}}})
                                                   x.Round of
                                                  Some n =>
                                                   {MissionSize = n,
                                                     NumPlayers =
                                                      x.NumPlayers} |
                                                   None =>
                                                    (error
                                                     "Nothing, not even this error, is impossible!"
                                                     :
                                                     {MissionSize :
                                                       FFI(Basis.int),

                                                       NumPlayers :
                                                        FFI(Basis.int)}))},

                                             2 = None}))) |
                                    Vote x =>
                                     Vote
                                      (fn _ : {} =>
                                        (let _ : {} =
                                         (broadcast user.Group
                                           (Voting x.Team) {}) in
                                         ($mp'_unpoly_unpoly x 0 None
                                           x.Roles))))) in
                                ((let request : $poly2898 =
                                  ((case v of
                                     Done x => Done (x {}) |
                                      Mission x => Mission (x {}) |
                                      New x => New (x {}) |
                                      Propose x => Propose (x {}) |
                                      Vote x => Vote (x {}))) in
                                  ((let reqs :
                                    list({Member : FFI(Basis.int),
                                           Request : $poly2849}) =
                                    ((case request of
                                       Done x =>
                                        $mp'_unpoly_unpoly None x |
                                        Mission x =>
                                         $mp'_unpoly_unpoly None x |
                                        New x =>
                                         $mp'_unpoly_unpoly None x |
                                        Propose x =>
                                         $mp'_unpoly_unpoly None x |
                                        Vote x =>
                                         $mp'_unpoly_unpoly None x))
                                    in
                                    ((let cond : FFI(Basis.string) =
                                      ("((T_T.uw_group = " ^
                                        FFI(Basis.sqlifyInt(user.Group))
                                         ^
                                         ") AND " ^
                                          ($foldl'_unpoly_unpoly
                                            "TRUE"
                                            ($mp'_unpoly_unpoly None
                                              ($mp'_unpoly_unpoly
                                                None reqs))) ^ ")")
                                      in
                                      ((let job : FFI(Basis.int) =
                                        (nextval("uw_Game_jobs")) in
                                        ((let _ : {} =
                                          (query[] [T :
                                                     {Channel :
                                                       FFI(Basis.channel),

                                                       Member :
                                                        FFI(Basis.int)}] [{}]
                                            "SELECT T_T.uw_Channel, T_T.uw_Member FROM uw_Game_users AS T_T"
                                             ^
                                             (case cond of
                                               "TRUE" => "" |
                                                where =>
                                                 " WHERE " ^ where) ^
                                              " GROUP BY T_T.uw_Channel, T_T.uw_Member"
                                            initial {} in
                                            (case r.T of
                                              {Member = member,
                                                Channel = chan} =>
                                               (let v :
                                                {Job : FFI(Basis.int),

                                                  Request : $poly2849}
                                                =
                                                ({Job = job,
                                                   Request =
                                                    (case
                                                      $find'_unpoly
                                                       member reqs of
                                                      None =>
                                                       (error
                                                        "Nothing, not even this error, is impossible!"
                                                        :
                                                        {Request :
                                                          $poly2849})
                                                                      |

                                                       Some req =>
                                                        {Request =
                                                          req.Request}).Request})
                                                in
                                                (FFI(Basis.send(chan,
                                                                 FFI(Basis.urlifyInt(v.Job))
                                                                  ^
                                                                  "/"
                                                                   ^
                                                                   urlify_$poly2849
                                                                    v.Request))))))
                                          in
                                          (dml("UPDATE uw_Game_users AS T_T SET uw_Instance = "
                                                ^
                                                (case
                                                  Some
                                                   (urlify_$poly2855
                                                     (case request of
                                                       Done x =>
                                                        Done job |
                                                        Mission x =>
                                                         Mission job
                                                                     |

                                                        New x =>
                                                         New job |
                                                        Propose x =>
                                                         Propose job
                                                                     |

                                                        Vote x =>
                                                         Vote job))
                                                  of
                                                  None =>
                                                   "NULL::text" |
                                                   Some y =>
                                                    FFI(Basis.sqlifyString(y)))
                                                 ^ " WHERE " ^ cond))))))))))))))))))
                                                                                      |

                      Propose x =>
                       (let cond : FFI(Basis.string) =
                        ("((T_T.uw_label = " ^
                          FFI(Basis.sqlifyInt(user.Group)) ^
                           ") AND TRUE)") in
                        ((let $x : {State : FFI(Basis.string)} =
                          ((case
                             query[] [T : {State : FFI(Basis.string)}] [option({T
                                                                                 :
                                                                                 {State
                                                                                   :
                                                                                   FFI(Basis.string)}})]
                              "SELECT T_T.uw_State FROM uw_Game_Sm_sms AS T_T"
                               ^
                               (case cond of
                                 "TRUE" => "" |
                                  where => " WHERE " ^ where) ^
                                " GROUP BY T_T.uw_State" initial None
                              in Some r of
                             None =>
                              (error "Query returned no rows" :
                               {State : FFI(Basis.string)}) |
                              Some r => r.T)) in
                          ((case
                             (case $x of
                               {State = statez} =>
                                (case
                                  (case
                                    (case unurlify(statez) of
                                      Done x => None |
                                       Mission x => None |
                                       New x => None |
                                       Propose x =>
                                        Some
                                         (Propose
                                           (Vote
                                             {Attempt = x.Attempt,
                                               Leader = x.Leader,
                                               NumPlayers =
                                                x.NumPlayers,
                                               Roles = x.Roles,
                                               Round = x.Round,
                                               Score = x.Score,
                                               Team =
                                                (case x of
                                                  Some
                                                   {1 =
                                                     {Member = player,

                                                       Response =
                                                        team},
                                                     2 = None} =>
                                                   (case
                                                     (player ==
                                                       x.Leader) of
                                                     FFIC(Basis.True)
                                                      =>
                                                      $sort'_unpoly
                                                       team |
                                                      FFIC(Basis.False)
                                                       =>
                                                       (error
                                                        "Nothing, not even this error, is impossible!"
                                                        :
                                                        list(FFI(Basis.int))))
                                                                               |

                                                   _ =>
                                                    (error
                                                     "Nothing, not even this error, is impossible!"
                                                     :
                                                     list(FFI(Basis.int))))}))
                                                                               |

                                       Vote x => None) of
                                    None => None |
                                     Some y =>
                                      Some
                                       (case y of
                                         Done x => x |
                                          Mission x => x |
                                          New x => x |
                                          Propose x => x |
                                          Vote x => x)) of
                                  None => None |
                                   Some state =>
                                    (let _ : {} =
                                     (dml("UPDATE uw_Game_Sm_sms AS T_T SET uw_State = "
                                           ^
                                           FFI(Basis.sqlifyString(urlify_$poly2886
                                                                   state))
                                            ^ " WHERE " ^ cond)) in
                                     (Some state)))) of
                             None =>
                              (error
                               "Nothing, not even this error, is impossible!"
                               : {} -> {}) {} |
                              Some state =>
                               (let v : $poly2904 =
                                ((case state of
                                   Done x =>
                                    Done
                                     (fn _ : {} =>
                                       (let _ : {} =
                                        (broadcast user.Group
                                          (Victory x) {}) in
                                        ((let _ : {} =
                                          (dml("DELETE FROM uw_Game_games AS T_T WHERE ((T_T.uw_group = "
                                                ^
                                                FFI(Basis.sqlifyInt(user.Group))
                                                 ^ ") AND TRUE)")) in
                                          ($mp'_unpoly_unpoly 0 None
                                            x.Roles))))) |
                                    Mission x =>
                                     Mission
                                      (fn _ : {} =>
                                        (let _ : {} =
                                         (broadcast user.Group
                                           (Acting x.Team) {}) in
                                         ($mp'_unpoly_unpoly x None
                                           x.Team))) |
                                    New x =>
                                     New
                                      (fn _ : {} =>
                                        $mp'_unpoly_unpoly x 0 None
                                         x.Roles) |
                                    Propose x =>
                                     Propose
                                      (fn _ : {} =>
                                        (let _ : {} =
                                         (broadcast user.Group
                                           (Proposing x.Leader) {})
                                         in
                                         (Some
                                           {1 =
                                             {Member = x.Leader,
                                               Request =
                                                (case
                                                  $nth_unpoly
                                                   (case x.NumPlayers
                                                     of
                                                     5 =>
                                                      Some
                                                       {1 = 2,
                                                         2 =
                                                          Some
                                                           {1 = 3,
                                                             2 =
                                                              Some
                                                               {1 = 2,

                                                                 2 =
                                                                  Some
                                                                   {1
                                                                     =
                                                                     3,

                                                                     2
                                                                      =
                                                                      Some
                                                                       {1
                                                                         =
                                                                         3,

                                                                         2
                                                                          =
                                                                          None}}}}}
                                                                                    |

                                                      6 =>
                                                       Some
                                                        {1 = 2,
                                                          2 =
                                                           Some
                                                            {1 = 3,
                                                              2 =
                                                               Some
                                                                {1 =
                                                                  4,
                                                                  2 =
                                                                   Some
                                                                    {1
                                                                      =
                                                                      3,

                                                                      2
                                                                       =
                                                                       Some
                                                                        {1
                                                                          =
                                                                          4,

                                                                          2
                                                                           =
                                                                           None}}}}}
                                                                                     |

                                                      7 =>
                                                       Some
                                                        {1 = 2,
                                                          2 =
                                                           Some
                                                            {1 = 3,
                                                              2 =
                                                               Some
                                                                {1 =
                                                                  3,
                                                                  2 =
                                                                   Some
                                                                    {1
                                                                      =
                                                                      4,

                                                                      2
                                                                       =
                                                                       Some
                                                                        {1
                                                                          =
                                                                          4,

                                                                          2
                                                                           =
                                                                           None}}}}}
                                                                                     |

                                                      _ =>
                                                       Some
                                                        {1 = 3,
                                                          2 =
                                                           Some
                                                            {1 = 4,
                                                              2 =
                                                               Some
                                                                {1 =
                                                                  4,
                                                                  2 =
                                                                   Some
                                                                    {1
                                                                      =
                                                                      5,

                                                                      2
                                                                       =
                                                                       Some
                                                                        {1
                                                                          =
                                                                          5,

                                                                          2
                                                                           =
                                                                           None}}}}})
                                                   x.Round of
                                                  Some n =>
                                                   {MissionSize = n,
                                                     NumPlayers =
                                                      x.NumPlayers} |
                                                   None =>
                                                    (error
                                                     "Nothing, not even this error, is impossible!"
                                                     :
                                                     {MissionSize :
                                                       FFI(Basis.int),

                                                       NumPlayers :
                                                        FFI(Basis.int)}))},

                                             2 = None}))) |
                                    Vote x =>
                                     Vote
                                      (fn _ : {} =>
                                        (let _ : {} =
                                         (broadcast user.Group
                                           (Voting x.Team) {}) in
                                         ($mp'_unpoly_unpoly x 0 None
                                           x.Roles))))) in
                                ((let request : $poly2898 =
                                  ((case v of
                                     Done x => Done (x {}) |
                                      Mission x => Mission (x {}) |
                                      New x => New (x {}) |
                                      Propose x => Propose (x {}) |
                                      Vote x => Vote (x {}))) in
                                  ((let reqs :
                                    list({Member : FFI(Basis.int),
                                           Request : $poly2849}) =
                                    ((case request of
                                       Done x =>
                                        $mp'_unpoly_unpoly None x |
                                        Mission x =>
                                         $mp'_unpoly_unpoly None x |
                                        New x =>
                                         $mp'_unpoly_unpoly None x |
                                        Propose x =>
                                         $mp'_unpoly_unpoly None x |
                                        Vote x =>
                                         $mp'_unpoly_unpoly None x))
                                    in
                                    ((let cond : FFI(Basis.string) =
                                      ("((T_T.uw_group = " ^
                                        FFI(Basis.sqlifyInt(user.Group))
                                         ^
                                         ") AND " ^
                                          ($foldl'_unpoly_unpoly
                                            "TRUE"
                                            ($mp'_unpoly_unpoly None
                                              ($mp'_unpoly_unpoly
                                                None reqs))) ^ ")")
                                      in
                                      ((let job : FFI(Basis.int) =
                                        (nextval("uw_Game_jobs")) in
                                        ((let _ : {} =
                                          (query[] [T :
                                                     {Channel :
                                                       FFI(Basis.channel),

                                                       Member :
                                                        FFI(Basis.int)}] [{}]
                                            "SELECT T_T.uw_Channel, T_T.uw_Member FROM uw_Game_users AS T_T"
                                             ^
                                             (case cond of
                                               "TRUE" => "" |
                                                where =>
                                                 " WHERE " ^ where) ^
                                              " GROUP BY T_T.uw_Channel, T_T.uw_Member"
                                            initial {} in
                                            (case r.T of
                                              {Member = member,
                                                Channel = chan} =>
                                               (let v :
                                                {Job : FFI(Basis.int),

                                                  Request : $poly2849}
                                                =
                                                ({Job = job,
                                                   Request =
                                                    (case
                                                      $find'_unpoly
                                                       member reqs of
                                                      None =>
                                                       (error
                                                        "Nothing, not even this error, is impossible!"
                                                        :
                                                        {Request :
                                                          $poly2849})
                                                                      |

                                                       Some req =>
                                                        {Request =
                                                          req.Request}).Request})
                                                in
                                                (FFI(Basis.send(chan,
                                                                 FFI(Basis.urlifyInt(v.Job))
                                                                  ^
                                                                  "/"
                                                                   ^
                                                                   urlify_$poly2849
                                                                    v.Request))))))
                                          in
                                          (dml("UPDATE uw_Game_users AS T_T SET uw_Instance = "
                                                ^
                                                (case
                                                  Some
                                                   (urlify_$poly2855
                                                     (case request of
                                                       Done x =>
                                                        Done job |
                                                        Mission x =>
                                                         Mission job
                                                                     |

                                                        New x =>
                                                         New job |
                                                        Propose x =>
                                                         Propose job
                                                                     |

                                                        Vote x =>
                                                         Vote job))
                                                  of
                                                  None =>
                                                   "NULL::text" |
                                                   Some y =>
                                                    FFI(Basis.sqlifyString(y)))
                                                 ^ " WHERE " ^ cond))))))))))))))))))
                                                                                      |

                      Vote x =>
                       (let resp : $poly2874 =
                        (Vote
                          (let _ : {} =
                           (broadcast user.Group (Votes x) {}) in
                           (x))) in
                        ((let cond : FFI(Basis.string) =
                          ("((T_T.uw_label = " ^
                            FFI(Basis.sqlifyInt(user.Group)) ^
                             ") AND TRUE)") in
                          ((let $x : {State : FFI(Basis.string)} =
                            ((case
                               query[] [T :
                                         {State : FFI(Basis.string)}] [option({T
                                                                                :
                                                                                {State
                                                                                  :
                                                                                  FFI(Basis.string)}})]
                                "SELECT T_T.uw_State FROM uw_Game_Sm_sms AS T_T"
                                 ^
                                 (case cond of
                                   "TRUE" => "" |
                                    where => " WHERE " ^ where) ^
                                  " GROUP BY T_T.uw_State" initial
                                None in Some r of
                               None =>
                                (error "Query returned no rows" :
                                 {State : FFI(Basis.string)}) |
                                Some r => r.T)) in
                            ((case
                               (case $x of
                                 {State = statez} =>
                                  (case
                                    (case
                                      (case unurlify(statez) of
                                        Done x =>
                                         (case resp of
                                           Done x =>
                                            Some
                                             (Done
                                               (case
                                                 {Effect = x,
                                                   State = x} of
                                                 {State = xs,
                                                   Effect = {}} =>
                                                  Done xs)) |
                                            Mission x => None |
                                            New x => None |
                                            Propose x => None |
                                            Vote x => None) |
                                         Mission x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x =>
                                              Some
                                               (let y :
                                                FFI(Basis.int) =
                                                ((case
                                                   (($foldl'_unpoly_unpoly
                                                      0 x) <=
                                                     (case
                                                       (case
                                                         (x.Round ==
                                                           3) of
                                                         FFIC(Basis.True)
                                                          =>
                                                          (x.NumPlayers
                                                            < 7) |
                                                          FFIC(Basis.False)
                                                           =>
                                                           FFIC(Basis.False))
                                                       of
                                                       FFIC(Basis.True)
                                                        => 1 |
                                                        FFIC(Basis.False)
                                                         => 0)) of
                                                   FFIC(Basis.True)
                                                    => 1 |
                                                    FFIC(Basis.False)
                                                     => 0)) in
                                                ((let score :
                                                  FFI(Basis.int) =
                                                  ((x.Score + y)) in
                                                  ((let x : $poly2886
                                                    =
                                                    ((case
                                                       (! (score < 3))
                                                       of
                                                       FFIC(Basis.True)
                                                        =>
                                                        Done
                                                         {Roles =
                                                           x.Roles,
                                                           Winner =
                                                            Resistance}
                                                                        |

                                                        FFIC(Basis.False)
                                                         =>
                                                         (case
                                                           (!
                                                             ((x.Round
                                                                -
                                                                score)
                                                               < 3))
                                                           of
                                                           FFIC(Basis.True)
                                                            =>
                                                            Done
                                                             {Roles =
                                                               x.Roles,

                                                               Winner
                                                                = Spy}
                                                                       |

                                                            FFIC(Basis.False)
                                                             =>
                                                             Propose
                                                              {Attempt
                                                                = 0,
                                                                Leader
                                                                 =
                                                                 ((x.Leader
                                                                    +
                                                                    1)
                                                                   %
                                                                   x.NumPlayers),

                                                                NumPlayers
                                                                 =
                                                                 x.NumPlayers,

                                                                Roles
                                                                 =
                                                                 x.Roles,

                                                                Round
                                                                 =
                                                                 (x.Round
                                                                   +
                                                                   1),

                                                                Score
                                                                 =
                                                                 score})))
                                                    in (Mission x))))))
                                                                        |

                                             New x => None |
                                             Propose x => None |
                                             Vote x => None) |
                                         New x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x => None |
                                             New x =>
                                              Some
                                               (New
                                                 (case
                                                   {Effect = x,
                                                     State = x} of
                                                   {State = xs,
                                                     Effect = {}} =>
                                                    Propose xs)) |
                                             Propose x => None |
                                             Vote x => None) |
                                         Propose x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x => None |
                                             New x => None |
                                             Propose x =>
                                              Some
                                               (Propose
                                                 (Vote
                                                   {Attempt =
                                                     x.Attempt,
                                                     Leader =
                                                      x.Leader,
                                                     NumPlayers =
                                                      x.NumPlayers,
                                                     Roles = x.Roles,
                                                     Round = x.Round,
                                                     Score = x.Score,
                                                     Team =
                                                      (case x of
                                                        Some
                                                         {1 =
                                                           {Member =
                                                             player,
                                                             Response
                                                              = team},

                                                           2 = None}
                                                         =>
                                                         (case
                                                           (player ==
                                                             x.Leader)
                                                           of
                                                           FFIC(Basis.True)
                                                            =>
                                                            $sort'_unpoly
                                                             team |
                                                            FFIC(Basis.False)
                                                             =>
                                                             (error
                                                              "Nothing, not even this error, is impossible!"
                                                              :
                                                              list(FFI(Basis.int))))
                                                                                     |

                                                         _ =>
                                                          (error
                                                           "Nothing, not even this error, is impossible!"
                                                           :
                                                           list(FFI(Basis.int))))}))
                                                                                     |

                                             Vote x => None) |
                                         Vote x =>
                                          (case resp of
                                            Done x => None |
                                             Mission x => None |
                                             New x => None |
                                             Propose x => None |
                                             Vote x =>
                                              Some
                                               (let x : $poly2886 =
                                                ((case
                                                   (($foldl'_unpoly_unpoly
                                                      0 x) <
                                                     (x.NumPlayers /
                                                       2)) of
                                                   FFIC(Basis.True)
                                                    => Mission x |
                                                    FFIC(Basis.False)
                                                     =>
                                                     Propose
                                                      {Attempt =
                                                        (x.Attempt +
                                                          1),
                                                        Leader =
                                                         x.Leader,
                                                        NumPlayers =
                                                         x.NumPlayers,

                                                        Roles =
                                                         x.Roles,
                                                        Round =
                                                         x.Round,
                                                        Score =
                                                         x.Score}))
                                                in (Vote x)))) of
                                      None => None |
                                       Some y =>
                                        Some
                                         (case y of
                                           Done x => x |
                                            Mission x => x |
                                            New x => x |
                                            Propose x => x |
                                            Vote x => x)) of
                                    None => None |
                                     Some state =>
                                      (let _ : {} =
                                       (dml("UPDATE uw_Game_Sm_sms AS T_T SET uw_State = "
                                             ^
                                             FFI(Basis.sqlifyString(urlify_$poly2886
                                                                     state))
                                              ^ " WHERE " ^ cond)) in
                                       (Some state)))) of
                               None =>
                                (error
                                 "Nothing, not even this error, is impossible!"
                                 : {} -> {}) {} |
                                Some state =>
                                 (let v : $poly2904 =
                                  ((case state of
                                     Done x =>
                                      Done
                                       (fn _ : {} =>
                                         (let _ : {} =
                                          (broadcast user.Group
                                            (Victory x) {}) in
                                          ((let _ : {} =
                                            (dml("DELETE FROM uw_Game_games AS T_T WHERE ((T_T.uw_group = "
                                                  ^
                                                  FFI(Basis.sqlifyInt(user.Group))
                                                   ^ ") AND TRUE)"))
                                            in
                                            ($mp'_unpoly_unpoly 0
                                              None x.Roles))))) |
                                      Mission x =>
                                       Mission
                                        (fn _ : {} =>
                                          (let _ : {} =
                                           (broadcast user.Group
                                             (Acting x.Team) {}) in
                                           ($mp'_unpoly_unpoly x None
                                             x.Team))) |
                                      New x =>
                                       New
                                        (fn _ : {} =>
                                          $mp'_unpoly_unpoly x 0 None
                                           x.Roles) |
                                      Propose x =>
                                       Propose
                                        (fn _ : {} =>
                                          (let _ : {} =
                                           (broadcast user.Group
                                             (Proposing x.Leader) {})
                                           in
                                           (Some
                                             {1 =
                                               {Member = x.Leader,
                                                 Request =
                                                  (case
                                                    $nth_unpoly
                                                     (case
                                                       x.NumPlayers
                                                       of
                                                       5 =>
                                                        Some
                                                         {1 = 2,
                                                           2 =
                                                            Some
                                                             {1 = 3,
                                                               2 =
                                                                Some
                                                                 {1 =
                                                                   2,
                                                                   2
                                                                    =
                                                                    Some
                                                                     {1
                                                                       =
                                                                       3,

                                                                       2
                                                                        =
                                                                        Some
                                                                         {1
                                                                           =
                                                                           3,

                                                                           2
                                                                            =
                                                                            None}}}}}
                                                                                      |

                                                        6 =>
                                                         Some
                                                          {1 = 2,
                                                            2 =
                                                             Some
                                                              {1 = 3,
                                                                2 =
                                                                 Some
                                                                  {1
                                                                    =
                                                                    4,

                                                                    2
                                                                     =
                                                                     Some
                                                                      {1
                                                                        =
                                                                        3,

                                                                        2
                                                                         =
                                                                         Some
                                                                          {1
                                                                            =
                                                                            4,

                                                                            2
                                                                             =
                                                                             None}}}}}
                                                                                       |

                                                        7 =>
                                                         Some
                                                          {1 = 2,
                                                            2 =
                                                             Some
                                                              {1 = 3,
                                                                2 =
                                                                 Some
                                                                  {1
                                                                    =
                                                                    3,

                                                                    2
                                                                     =
                                                                     Some
                                                                      {1
                                                                        =
                                                                        4,

                                                                        2
                                                                         =
                                                                         Some
                                                                          {1
                                                                            =
                                                                            4,

                                                                            2
                                                                             =
                                                                             None}}}}}
                                                                                       |

                                                        _ =>
                                                         Some
                                                          {1 = 3,
                                                            2 =
                                                             Some
                                                              {1 = 4,
                                                                2 =
                                                                 Some
                                                                  {1
                                                                    =
                                                                    4,

                                                                    2
                                                                     =
                                                                     Some
                                                                      {1
                                                                        =
                                                                        5,

                                                                        2
                                                                         =
                                                                         Some
                                                                          {1
                                                                            =
                                                                            5,

                                                                            2
                                                                             =
                                                                             None}}}}})
                                                     x.Round of
                                                    Some n =>
                                                     {MissionSize = n,

                                                       NumPlayers =
                                                        x.NumPlayers}
                                                                      |

                                                     None =>
                                                      (error
                                                       "Nothing, not even this error, is impossible!"
                                                       :
                                                       {MissionSize :
                                                         FFI(Basis.int),

                                                         NumPlayers :
                                                          FFI(Basis.int)}))},

                                               2 = None}))) |
                                      Vote x =>
                                       Vote
                                        (fn _ : {} =>
                                          (let _ : {} =
                                           (broadcast user.Group
                                             (Voting x.Team) {}) in
                                           ($mp'_unpoly_unpoly x 0
                                             None x.Roles))))) in
                                  ((let request : $poly2898 =
                                    ((case v of
                                       Done x => Done (x {}) |
                                        Mission x => Mission (x {}) |
                                        New x => New (x {}) |
                                        Propose x => Propose (x {}) |
                                        Vote x => Vote (x {}))) in
                                    ((let reqs :
                                      list({Member : FFI(Basis.int),
                                             Request : $poly2849}) =
                                      ((case request of
                                         Done x =>
                                          $mp'_unpoly_unpoly None x |
                                          Mission x =>
                                           $mp'_unpoly_unpoly None x
                                                                     |

                                          New x =>
                                           $mp'_unpoly_unpoly None x
                                                                     |

                                          Propose x =>
                                           $mp'_unpoly_unpoly None x
                                                                     |

                                          Vote x =>
                                           $mp'_unpoly_unpoly None x))
                                      in
                                      ((let cond : FFI(Basis.string)
                                        =
                                        ("((T_T.uw_group = " ^
                                          FFI(Basis.sqlifyInt(user.Group))
                                           ^
                                           ") AND " ^
                                            ($foldl'_unpoly_unpoly
                                              "TRUE"
                                              ($mp'_unpoly_unpoly
                                                None
                                                ($mp'_unpoly_unpoly
                                                  None reqs))) ^ ")")
                                        in
                                        ((let job : FFI(Basis.int) =
                                          (nextval("uw_Game_jobs"))
                                          in
                                          ((let _ : {} =
                                            (query[] [T :
                                                       {Channel :
                                                         FFI(Basis.channel),

                                                         Member :
                                                          FFI(Basis.int)}] [{}]
                                              "SELECT T_T.uw_Channel, T_T.uw_Member FROM uw_Game_users AS T_T"
                                               ^
                                               (case cond of
                                                 "TRUE" => "" |
                                                  where =>
                                                   " WHERE " ^ where)
                                                ^
                                                " GROUP BY T_T.uw_Channel, T_T.uw_Member"
                                              initial {} in
                                              (case r.T of
                                                {Member = member,
                                                  Channel = chan} =>
                                                 (let v :
                                                  {Job :
                                                    FFI(Basis.int),
                                                    Request :
                                                     $poly2849} =
                                                  ({Job = job,
                                                     Request =
                                                      (case
                                                        $find'_unpoly
                                                         member reqs
                                                        of
                                                        None =>
                                                         (error
                                                          "Nothing, not even this error, is impossible!"
                                                          :
                                                          {Request :
                                                            $poly2849})
                                                                        |

                                                         Some req =>
                                                          {Request =
                                                            req.Request}).Request})
                                                  in
                                                  (FFI(Basis.send(chan,

                                                                   FFI(Basis.urlifyInt(v.Job))
                                                                    ^
                                                                    "/"
                                                                     ^
                                                                     urlify_$poly2849
                                                                      v.Request))))))
                                            in
                                            (dml("UPDATE uw_Game_users AS T_T SET uw_Instance = "
                                                  ^
                                                  (case
                                                    Some
                                                     (urlify_$poly2855
                                                       (case request
                                                         of
                                                         Done x =>
                                                          Done job |
                                                          Mission x
                                                           =>
                                                           Mission
                                                            job |
                                                          New x =>
                                                           New job |
                                                          Propose x
                                                           =>
                                                           Propose
                                                            job |
                                                          Vote x =>
                                                           Vote job))
                                                    of
                                                    None =>
                                                     "NULL::text" |
                                                     Some y =>
                                                      FFI(Basis.sqlifyString(y)))
                                                   ^ " WHERE " ^ cond))))))))))))))))))))))))))))))

 export rpc(rw) handle as
  Game/handle
              ({Group : FFI(Basis.int), Key : FFI(Basis.int),
                 Member : FFI(Basis.int)}) (FFI(Basis.int))
               ($poly2862) ({}) -> {}

 val
  wrap_play as Game/play : option(FFI(Basis.int)) -> {} -> {} -> {} =
   (fn x1 : option(FFI(Basis.int)) =>
     (fn x0 : {} =>
       (fn _ : {} =>
         (let head : source =
          (FFI(Basis.new_client_source("{c:\"c\",v:null}"))) in
          ((let buffer : {Head : source, Tail : source} =
            ({Head = head,
               Tail =
                FFI(Basis.new_client_source("{c:\"c\",v:" ^
                                             FFI(Basis.htmlifySource(head))
                                              ^ "}"))}) in
            ((let $x :
              {1 : {Group : FFI(Basis.int), Member : FFI(Basis.int)},
                2 : FFI(Basis.channel)} =
              ((case x1 of
                 None =>
                  (let group : FFI(Basis.int) =
                   (nextval("uw_Game_groups")) in
                   ((let chan : FFI(Basis.channel) =
                     (FFI(Basis.new_channel({}))) in
                     ((let _ : {} =
                       (dml("INSERT INTO uw_Game_games (uw_Channel, uw_Group, uw_NumPlayers, uw_Started) VALUES ("
                             ^
                             FFI(Basis.sqlifyChannel(chan)) ^
                              ", " ^
                               FFI(Basis.sqlifyInt(group)) ^
                                ", 1::int8, FALSE)")) in
                       ({1 = {Group = group, Member = 0}, 2 = chan}))))))
                                                                          |

                  Some group =>
                   (let $x :
                    {Channel : FFI(Basis.channel),
                      NumPlayers : FFI(Basis.int),
                      Started : FFI(Basis.bool)} =
                    ((case
                       query[] [T :
                                 {Channel : FFI(Basis.channel),
                                   NumPlayers : FFI(Basis.int),
                                   Started : FFI(Basis.bool)}] [option({T
                                                                         :
                                                                         {Channel
                                                                           :
                                                                           FFI(Basis.channel),

                                                                           NumPlayers
                                                                            :
                                                                            FFI(Basis.int),

                                                                           Started
                                                                            :
                                                                            FFI(Basis.bool)}})]
                        "SELECT T_T.uw_Channel, T_T.uw_NumPlayers, T_T.uw_Started FROM uw_Game_games AS T_T WHERE ((T_T.uw_group = "
                         ^
                         FFI(Basis.sqlifyInt(group)) ^
                          ") AND TRUE) GROUP BY T_T.uw_Channel, T_T.uw_NumPlayers, T_T.uw_Started"
                        initial None in Some r of
                       None =>
                        (error "Query returned no rows" :
                         {Channel : FFI(Basis.channel),
                           NumPlayers : FFI(Basis.int),
                           Started : FFI(Basis.bool)}) |
                        Some r => r.T)) in
                    ((case $x of
                       {NumPlayers = n, Started = started,
                         Channel = chan} =>
                        (case started of
                          FFIC(Basis.True) =>
                           (error
                            "Nothing, not even this error, is impossible!"
                            :
                            {1 :
                              {Group : FFI(Basis.int),
                                Member : FFI(Basis.int)},
                              2 : FFI(Basis.channel)}) |
                           FFIC(Basis.False) =>
                            (let _ : {} =
                             (dml("UPDATE uw_Game_games AS T_T SET uw_NumPlayers = "
                                   ^
                                   FFI(Basis.sqlifyInt((n + 1))) ^
                                    " WHERE ((T_T.uw_group = " ^
                                     FFI(Basis.sqlifyInt(group)) ^
                                      ") AND TRUE)")) in
                             ({1 = {Group = group, Member = n},
                                2 = chan})))))))) in
              ((let $x :
                {Channel : FFI(Basis.channel),
                  Connection :
                   {Channel : FFI(Basis.channel),
                     Group : FFI(Basis.int), Key : FFI(Basis.int),
                     Member : FFI(Basis.int), Source : source},
                  Player : FFI(Basis.int)} =
                ((case $x of
                   {1 = user, 2 = chan} =>
                    (let chan : FFI(Basis.channel) =
                     (FFI(Basis.new_channel({}))) in
                     ((let key : FFI(Basis.int) = (FFI(Basis.rand()))
                       in
                       ((let _ : {} =
                         (dml("INSERT INTO uw_Game_users (uw_Channel, uw_Group, uw_Instance, uw_Key, uw_Member, uw_Response) VALUES ("
                               ^
                               FFI(Basis.sqlifyChannel(chan)) ^
                                ", " ^
                                 FFI(Basis.sqlifyInt(user.Group)) ^
                                  ", NULL::text, " ^
                                   FFI(Basis.sqlifyInt(key)) ^
                                    ", " ^
                                     FFI(Basis.sqlifyInt(user.Member))
                                      ^ ", NULL::text)")) in
                         ({Channel = chan,
                            Connection =
                             {Channel = chan, Group = user.Group,
                               Key = key, Member = user.Member,
                               Source =
                                FFI(Basis.new_client_source("{c:\"c\",v:null}"))},

                            Player = user.Member})))))))) in
                ((case $x of
                   {Player = player, Connection = connection,
                     Channel = chan} =>
                    (write("\n<body");
                     (write(FFI(Basis.maybe_onload(FFI(Basis.get_settings({}))
                                                    ^
                                                    "exec({c:\"a\",f:{c:\"a\",f:{c:\"a\",f:{c:\"a\",f:{c:\"n\",n:2919},x:{c:\"c\",v:{_Head:"
                                                     ^
                                                     FFI(Basis.htmlifySource(buffer.Head))
                                                      ^
                                                      ",_Tail:" ^
                                                       FFI(Basis.htmlifySource(buffer.Tail))
                                                        ^
                                                        "}}},x:{c:\"c\",v:{_Channel:"
                                                         ^
                                                         FFI(Basis.jsifyChannel(connection.Channel))
                                                          ^
                                                          ",_Group:"
                                                           ^
                                                           FFI(Basis.htmlifyInt(connection.Group))
                                                            ^
                                                            ",_Key:"
                                                             ^
                                                             FFI(Basis.htmlifyInt(connection.Key))
                                                              ^
                                                              ",_Member:"
                                                               ^
                                                               FFI(Basis.htmlifyInt(connection.Member))
                                                                ^
                                                                ",_Source:"
                                                                 ^
                                                                 FFI(Basis.htmlifySource(connection.Source))
                                                                  ^
                                                                  "}}},x:{c:\"c\",v:"
                                                                   ^
                                                                   FFI(Basis.jsifyChannel(chan))
                                                                    ^
                                                                    "}},x:{c:\"c\",v:null}})")));
                      (write(FFI(Basis.maybe_onunload("")));
                       (write(">\n<h1>Resistance</h1>\n<h3>Player ");
                        (FFI(Basis.htmlifyInt_w(player));
                         (write("</h3>\n<script type=\"text/javascript\">dyn(\"span\", execD({c:\"a\",f:{c:\"a\",f:{c:\"n\",n:2933},x:{c:\"c\",v:{_Channel:");
                          (write(FFI(Basis.jsifyChannel(connection.Channel)));
                           (write(",_Group:");
                            (FFI(Basis.htmlifyInt_w(connection.Group));
                             (write(",_Key:");
                              (FFI(Basis.htmlifyInt_w(connection.Key));
                               (write(",_Member:");
                                (FFI(Basis.htmlifyInt_w(connection.Member));
                                 (write(",_Source:");
                                  (FFI(Basis.htmlifySource_w(connection.Source));
                                   (write("}}},x:{c:\"c\",v:null}}))</script>\n<hr />\n<script type=\"text/javascript\">dyn(\"span\", execD({c:\"a\",f:{c:\"a\",f:{c:\"n\",n:2934},x:{c:\"c\",v:{_Head:");
                                    (FFI(Basis.htmlifySource_w(buffer.Head));
                                     (write(",_Tail:");
                                      (FFI(Basis.htmlifySource_w(buffer.Tail));
                                       write("}}},x:{c:\"c\",v:null}}))</script>\n</body>\n"))))))))))))))))))))))))))))))))

 export action(rw) wrap_play as
  Game/play (option(FFI(Basis.int))) ({}) ({}) -> {}

 val
  wrap_menu as Game/menu : {} -> {} =
   (fn _ : {} =>
     (write("\n<body");
      (write(FFI(Basis.maybe_onload(FFI(Basis.get_settings({})))));
       (write(FFI(Basis.maybe_onunload("")));
        (write(">\n <form method=\"post\" action=\"/Game/play/None\">\n<ul>\n");
         (query[] [T : {Group : FFI(Basis.int)}] [{}]
           "SELECT T_T.uw_Group FROM uw_Game_games AS T_T GROUP BY T_T.uw_Group"
           initial {} in
           (write("\n<li>\n<input type=\"submit\" value=\"");
            (FFI(Basis.attrifyString_w("Join game #" ^
                                        FFI(Basis.intToString(r.T.Group))));
             write("\" />\n</li>\n")));
          write("\n<li>\n<input type=\"submit\" value=\"Create new game\" />\n</li>\n</ul>\n</form>\n</body>\n")))))))
 export link(r) wrap_menu as Game/menu ({}) -> {}Stopped compilation after phase sqlcache
